<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.20"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>HWPRobot: communication.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">HWPRobot
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.20 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('communication_8h_source.html',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">communication.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="communication_8h.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * @file communication.h</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * @ingroup communication</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * Functions enabling communication between robot and HWPCS.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * Receive buffer size and UART to be used are defined by the user configuration</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * in src/cfg/io/uart/uart_cfg.h.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#ifndef COMMUNICATION_H_</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#define COMMUNICATION_H_</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160; </div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="packet_types_8h.html">packetTypes.h</a>&quot;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; </div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * Log levels for distinguishing different categories of log messages.</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * Log levels correspond to Java log levels and are shown in the debug view of</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * HWPCS.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> * To be used in</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> * ::communication_log(const Level_t level, const char* format, ...)</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550f">   26</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">enum</span> {</div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fa9525cea26834bf3ef0a859dce0e067b2">   27</a></span>&#160;    <a class="code" href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fa9525cea26834bf3ef0a859dce0e067b2">LEVEL_SEVERE</a> = 0, <span class="comment">///&lt; message level indicating a serious failure</span></div>
<div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fa2c5e7c66e41be7a8f0fcfb4f81a12c4a">   28</a></span>&#160;<span class="comment"></span>    <a class="code" href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fa2c5e7c66e41be7a8f0fcfb4f81a12c4a">LEVEL_WARNING</a> = 1, <span class="comment">///&lt; message level indicating a potential problem</span></div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fa831e8f5cdb3ed97330b2e17502149d8f">   29</a></span>&#160;<span class="comment"></span>    <a class="code" href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fa831e8f5cdb3ed97330b2e17502149d8f">LEVEL_INFO</a> = 2, <span class="comment">///&lt; message level for informational messages</span></div>
<div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fa7aba4b94af3ab21b068c95b540a726e9">   30</a></span>&#160;<span class="comment"></span>    <a class="code" href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fa7aba4b94af3ab21b068c95b540a726e9">LEVEL_FINE</a> = 3, <span class="comment">///&lt; message level providing tracing information</span></div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fa3430dedcbafdec4971559707704e5c7d">   31</a></span>&#160;<span class="comment"></span>    <a class="code" href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fa3430dedcbafdec4971559707704e5c7d">LEVEL_FINER</a> = 4, <span class="comment">///&lt; message level indicating a fairly detailed tracing message</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"></span>    <a class="code" href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fabb652376541b08fc5c1e8fab891c646b">LEVEL_FINEST</a> = 5 <span class="comment">///&lt; message level indicating a highly detailed tracing message</span></div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fabb652376541b08fc5c1e8fab891c646b">   33</a></span>&#160;<span class="comment"></span>} <a class="code" href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550f">Level_t</a>;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment"> * Communication errors resulting from communication_readPackets(),</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment"> * communication_log() or communication_log_P ().</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"> * The errors can be read and cleared by communication_getErrors().</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"> * Error values can be or&#39;ed.</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">/** Receive buffer is full */</span></div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="communication_8h.html#ac2dc4470b100652ba752891eaa5e22cb">   44</a></span>&#160;<span class="preprocessor">#define COMM_ERR_BUFFERFULL 1</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/** Packet is too small */</span></div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="communication_8h.html#a4a72042cc2cf82886a8ecc8a297fd9d2">   47</a></span>&#160;<span class="preprocessor">#define COMM_ERR_TOO_SMALL 2</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">/** Header checksum mismatch */</span></div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="communication_8h.html#a39569f50f4ed1e069ab62de4f999cbba">   50</a></span>&#160;<span class="preprocessor">#define COMM_ERR_HEADER_CHECKSUM 4</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">/** Packet size mismatch */</span></div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="communication_8h.html#a7b29fb3bb9ee0fab42592c161377f923">   53</a></span>&#160;<span class="preprocessor">#define COMM_ERR_SIZE_MISMATCH 8</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">/** Global checksum mismatch */</span></div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="communication_8h.html#a576c01ed60662c39a6443f032a1d766d">   56</a></span>&#160;<span class="preprocessor">#define COMM_ERR_CHECKSUM 16</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> * Packet received on a channel for which no callback function has been</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"> * registered</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="communication_8h.html#a0206c4eeab00679a4d2ffbb6e551c1be">   62</a></span>&#160;<span class="preprocessor">#define COMM_ERR_UNREGISTEREDCHANNEL 32</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"> * No memory for buffer in communication_log() or communication_log_P ()</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"> * could be allocated on heap</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="communication_8h.html#a40243218c26b75d62ed9983d246c601d">   68</a></span>&#160;<span class="preprocessor">#define COMM_ERR_OUT_OF_MEMORY 64</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"> * Definition of the number of communication channels</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="communication_8h.html#aaf7c9abafd1641a6c59bd7ccdf135d00">   73</a></span>&#160;<span class="preprocessor">#define COMM_MAX_CHANNELS 16</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> * Type definition of a function pointer defining the channel callback functions for</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> * incoming packages.</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> * The callback function is executed by communication_readPackets() when a packet</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> * was received for the corresponding channel.</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> * Registering the callback function &lt;code&gt;cbf()&lt;/code&gt; for channel i can be done by</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> * {@link communication_setCallback}(i, cbf).</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment"> * &lt;b&gt;Example:&lt;/b&gt;</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"> * @code</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"> * void cbf(const uint8_t* packet, const uint16_t size) {</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"> *     // parse packet and do some stuff</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"> * }</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"> * ...</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"> * communication_setCallback(i, cbf);</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"> * @endcode</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"> * The signature of the callback function is:</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment"> * @param   packet  pointer to the received packet (uint8_t*)</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"> * @param   size    size of the received packet (uint16_t)</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="communication_8h.html#a141571b5deee9eb44ec4418e27498edb">   99</a></span>&#160;<span class="keyword">typedef</span> void (*<a class="code" href="communication_8h.html#a141571b5deee9eb44ec4418e27498edb">ChannelCallback_t</a>)(<span class="keyword">const</span> uint8_t*, <span class="keyword">const</span> uint16_t);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"> * Initializes the communication protocol library. Must be invoked before any</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"> * other communication library function.</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"> * This function assumes that the UART to be used for communication was initialized</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"> * before (call uart_init() before this function).</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keywordtype">void</span> <a class="code" href="communication_8h.html#a9d1c122bc3538d94d6fd8328cd6c6a2d">communication_init</a>(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"> * Register a callback function with prototype as defined by ChannelCallback_t</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"> * for a communication channel.</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"> * The callback function is executed by communication_readPackets() when a packet</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> * was received for the corresponding channel.</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"> * @param   channel   communication channel</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"> * @param   callback  function pointer to the callback function</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keywordtype">void</span> <a class="code" href="communication_8h.html#a5431607792db0c22d879f78d7130505a">communication_setCallback</a>(<span class="keyword">const</span> <a class="code" href="packet_types_8h.html#a98c7ef0270800815d74cb371e50f93fb">Channel_t</a> channel, <span class="keyword">const</span> <a class="code" href="communication_8h.html#a141571b5deee9eb44ec4418e27498edb">ChannelCallback_t</a> callback);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"> * Unregister the callback function for the given communication channel.</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"> * @param   channel  communication channel</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keywordtype">void</span> <a class="code" href="communication_8h.html#a9b5634e7cbba8f212c0af5d385ef9d1e">communication_clearCallback</a>(<span class="keyword">const</span> <a class="code" href="packet_types_8h.html#a98c7ef0270800815d74cb371e50f93fb">Channel_t</a> channel);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"> * Send a packet to HWPCS on a specified channel. Blocks until all bytes have</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment"> * been put into the UART transmit buffer.</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"> * Due to blocking, this function must not be called from interrupt context.</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment"> * See documentation of function uart_write0() on how to disable blocking.</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"> * &lt;b&gt;Example:&lt;/b&gt;</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"> * @code</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"> * Telemetry_t telemetry;</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"> * telemetry.infrared1 = ADC_getFilteredValue(0);</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment"> * communication_writePacket(CH_OUT_TELEMETRY, (uint8_t*)&amp;telemetry, sizeof(telemetry));</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"> * @endcode</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"> * @param   channel   the channel to use, given as Channel_t (see packetTypes.h)</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"> * @param   packet    pointer to the packet to send (see packetTypes.h)</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"> * @param   size      size of the packet to send</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keywordtype">void</span> <a class="code" href="communication_8h.html#ae564c6709b426ad32c18d14ed9017330">communication_writePacket</a>(<span class="keyword">const</span> <a class="code" href="packet_types_8h.html#a98c7ef0270800815d74cb371e50f93fb">Channel_t</a> channel, <span class="keyword">const</span> uint8_t* packet, <span class="keyword">const</span> uint16_t size);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment"> * Read all available packets from the corresponding UART FIFO buffer.</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"> * Should be called periodically from the main loop context to poll received packages.</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"> * The function will internally invoke registered channel callback functions</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"> * which can be registered with communication_setCallback().</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment"> * The following error flags are set by this function, which can be fetched and</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment"> * cleared with communication_getErrors(): #COMM_ERR_BUFFERFULL,</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"> * #COMM_ERR_TOO_SMALL, #COMM_ERR_HEADER_CHECKSUM, #COMM_ERR_SIZE_MISMATCH,</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment"> * #COMM_ERR_CHECKSUM, #COMM_ERR_UNREGISTEREDCHANNEL</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="keywordtype">void</span> <a class="code" href="communication_8h.html#af40c2f783a1c166ccfe60255767ae129">communication_readPackets</a>(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"> * Send a log packet to HWPCS on channel #CH_OUT_DEBUG (0x00) which is shown in the</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"> * Debug View.</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"> * The resulting message string will be truncated after 256 characters excluding</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"> * null termination.</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"> * The function blocks until all bytes have been put into the UART transmit</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment"> * buffer.</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment"> * Due to blocking, this function must not be called from interrupt context.</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"> * See documentation of function uart_write0() on how to disable blocking.</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"> * @param   level   one of #Level_t</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"> * @param   format  a string containing the message format</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"> *                  (see &lt;a href=&quot;https://www.nongnu.org/avr-libc/user-manual/group__avr__stdio.html&quot; target=&quot;_blank&quot;&gt;vfprintf&lt;/a&gt;</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"> *                  from AVR Libc for details)</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keywordtype">void</span> <a class="code" href="communication_8h.html#a958f6ca3d0e087a1239562da9d2aa14d">communication_log</a>(<span class="keyword">const</span> <a class="code" href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550f">Level_t</a> level, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, ...);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"> * Same as communication_log(), however the format argument resides in flash</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"> * (program) memory.</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment"> * Send a log packet to HWPCS on channel #CH_OUT_DEBUG (0x00) which is shown in the</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"> * Debug View.</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment"> * The resulting message string will be truncated after 256 characters excluding</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment"> * null termination.</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"> * The function blocks until all bytes have been put into the UART transmit</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"> * buffer.</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment"> * Due to blocking, this function must not be called from interrupt context.</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment"> * See documentation of function uart_write0() on how to disable blocking.</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment"> * This function should be used in conjunction with type modifiers from</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"> * &lt;a href=&quot;https://www.nongnu.org/avr-libc/user-manual/group__avr__pgmspace.html&quot; target=&quot;_blank&quot;&gt;&lt;avr/pgmspace.h&gt;&lt;/a&gt;.</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment"> * The first argument format must reside in flash (program) memory.</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment"> * For statically allocated strings this can be done with</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment"> * \code</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment"> * uint8_t i = 3;</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment"> * char str[] = &quot;some text&quot;;</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment"> * communication_log_P(LEVEL_INFO, PSTR(&quot;Iteration i=%i Text=%s&quot;), i, str);</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"> * \endcode</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment"> * For other possibilities and further details see</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment"> * &lt;a href=&quot;https://www.nongnu.org/avr-libc/user-manual/group__avr__pgmspace.html&quot; target=&quot;_blank&quot;&gt;&lt;avr/pgmspace.h&gt;&lt;/a&gt;.</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment"> * @param   level   one of #Level_t</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment"> * @param   format  a string containing the message format</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment"> *                  (see &lt;a href=&quot;https://www.nongnu.org/avr-libc/user-manual/group__avr__stdio.html&quot; target=&quot;_blank&quot;&gt;vfprintf&lt;/a&gt;</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment"> *                  from AVR Libc for details)</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keywordtype">void</span> <a class="code" href="communication_8h.html#a110ba162015650bfeb25ab1ab56187f5">communication_log_P</a>(<span class="keyword">const</span> <a class="code" href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550f">Level_t</a> level, <span class="keyword">const</span> <span class="keywordtype">char</span>* format, ...);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment"> * Read and clear error state.</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment"> * The error state is set by communication_readPackets() to indicate several</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment"> * problems which may have occurred while reading the packets.</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"> * communication_log() and communication_log_P() can also set the error</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"> * #COMM_ERR_OUT_OF_MEMORY in case an internal buffer for creating the</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"> * log message cannot be allocated.</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"> * @return  uint8_t containing the error bits as given by the following</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="comment"> *                  definitions: #COMM_ERR_BUFFERFULL, #COMM_ERR_TOO_SMALL,</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="comment"> *                  #COMM_ERR_HEADER_CHECKSUM, #COMM_ERR_SIZE_MISMATCH,</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment"> *                  #COMM_ERR_CHECKSUM, #COMM_ERR_UNREGISTEREDCHANNEL,</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment"> *                  #COMM_ERR_OUT_OF_MEMORY</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;uint8_t <a class="code" href="communication_8h.html#a4bd5b16cc5959f7515e45e123160dcda">communication_getErrors</a>(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* COMMUNICATION_H_ */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="acommunication_8h_html_aba9282db2114423e9c2e2f4ad32f550fa9525cea26834bf3ef0a859dce0e067b2"><div class="ttname"><a href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fa9525cea26834bf3ef0a859dce0e067b2">LEVEL_SEVERE</a></div><div class="ttdeci">@ LEVEL_SEVERE</div><div class="ttdoc">message level indicating a serious failure</div><div class="ttdef"><b>Definition:</b> <a href="communication_8h_source.html#l00027">communication.h:27</a></div></div>
<div class="ttc" id="acommunication_8h_html_a4bd5b16cc5959f7515e45e123160dcda"><div class="ttname"><a href="communication_8h.html#a4bd5b16cc5959f7515e45e123160dcda">communication_getErrors</a></div><div class="ttdeci">uint8_t communication_getErrors(void)</div><div class="ttdoc">Read and clear error state.</div><div class="ttdef"><b>Definition:</b> <a href="communication_8c_source.html#l00249">communication.c:249</a></div></div>
<div class="ttc" id="acommunication_8h_html_aba9282db2114423e9c2e2f4ad32f550fa3430dedcbafdec4971559707704e5c7d"><div class="ttname"><a href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fa3430dedcbafdec4971559707704e5c7d">LEVEL_FINER</a></div><div class="ttdeci">@ LEVEL_FINER</div><div class="ttdoc">message level indicating a fairly detailed tracing message</div><div class="ttdef"><b>Definition:</b> <a href="communication_8h_source.html#l00031">communication.h:31</a></div></div>
<div class="ttc" id="acommunication_8h_html_aba9282db2114423e9c2e2f4ad32f550fa7aba4b94af3ab21b068c95b540a726e9"><div class="ttname"><a href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fa7aba4b94af3ab21b068c95b540a726e9">LEVEL_FINE</a></div><div class="ttdeci">@ LEVEL_FINE</div><div class="ttdoc">message level providing tracing information</div><div class="ttdef"><b>Definition:</b> <a href="communication_8h_source.html#l00030">communication.h:30</a></div></div>
<div class="ttc" id="acommunication_8h_html_a9d1c122bc3538d94d6fd8328cd6c6a2d"><div class="ttname"><a href="communication_8h.html#a9d1c122bc3538d94d6fd8328cd6c6a2d">communication_init</a></div><div class="ttdeci">void communication_init(void)</div><div class="ttdoc">Initializes the communication protocol library.</div><div class="ttdef"><b>Definition:</b> <a href="communication_8c_source.html#l00078">communication.c:78</a></div></div>
<div class="ttc" id="acommunication_8h_html_ae564c6709b426ad32c18d14ed9017330"><div class="ttname"><a href="communication_8h.html#ae564c6709b426ad32c18d14ed9017330">communication_writePacket</a></div><div class="ttdeci">void communication_writePacket(const Channel_t channel, const uint8_t *packet, const uint16_t size)</div><div class="ttdoc">Send a packet to HWPCS on a specified channel.</div><div class="ttdef"><b>Definition:</b> <a href="communication_8c_source.html#l00134">communication.c:134</a></div></div>
<div class="ttc" id="acommunication_8h_html_aba9282db2114423e9c2e2f4ad32f550f"><div class="ttname"><a href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550f">Level_t</a></div><div class="ttdeci">Level_t</div><div class="ttdoc">Log levels for distinguishing different categories of log messages.</div><div class="ttdef"><b>Definition:</b> <a href="communication_8h_source.html#l00026">communication.h:26</a></div></div>
<div class="ttc" id="acommunication_8h_html_a958f6ca3d0e087a1239562da9d2aa14d"><div class="ttname"><a href="communication_8h.html#a958f6ca3d0e087a1239562da9d2aa14d">communication_log</a></div><div class="ttdeci">void communication_log(const Level_t level, const char *format,...)</div><div class="ttdoc">Send a log packet to HWPCS on channel CH_OUT_DEBUG (0x00) which is shown in the Debug View.</div><div class="ttdef"><b>Definition:</b> <a href="communication_8c_source.html#l00094">communication.c:94</a></div></div>
<div class="ttc" id="acommunication_8h_html_aba9282db2114423e9c2e2f4ad32f550fabb652376541b08fc5c1e8fab891c646b"><div class="ttname"><a href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fabb652376541b08fc5c1e8fab891c646b">LEVEL_FINEST</a></div><div class="ttdeci">@ LEVEL_FINEST</div><div class="ttdoc">message level indicating a highly detailed tracing message</div><div class="ttdef"><b>Definition:</b> <a href="communication_8h_source.html#l00033">communication.h:32</a></div></div>
<div class="ttc" id="acommunication_8h_html_aba9282db2114423e9c2e2f4ad32f550fa2c5e7c66e41be7a8f0fcfb4f81a12c4a"><div class="ttname"><a href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fa2c5e7c66e41be7a8f0fcfb4f81a12c4a">LEVEL_WARNING</a></div><div class="ttdeci">@ LEVEL_WARNING</div><div class="ttdoc">message level indicating a potential problem</div><div class="ttdef"><b>Definition:</b> <a href="communication_8h_source.html#l00028">communication.h:28</a></div></div>
<div class="ttc" id="apacket_types_8h_html"><div class="ttname"><a href="packet_types_8h.html">packetTypes.h</a></div><div class="ttdoc">Packet types used for communication between robot and HWPCS.</div></div>
<div class="ttc" id="acommunication_8h_html_a110ba162015650bfeb25ab1ab56187f5"><div class="ttname"><a href="communication_8h.html#a110ba162015650bfeb25ab1ab56187f5">communication_log_P</a></div><div class="ttdeci">void communication_log_P(const Level_t level, const char *format,...)</div><div class="ttdoc">Same as communication_log(), however the format argument resides in flash (program) memory.</div><div class="ttdef"><b>Definition:</b> <a href="communication_8c_source.html#l00114">communication.c:114</a></div></div>
<div class="ttc" id="acommunication_8h_html_a9b5634e7cbba8f212c0af5d385ef9d1e"><div class="ttname"><a href="communication_8h.html#a9b5634e7cbba8f212c0af5d385ef9d1e">communication_clearCallback</a></div><div class="ttdeci">void communication_clearCallback(const Channel_t channel)</div><div class="ttdoc">Unregister the callback function for the given communication channel.</div><div class="ttdef"><b>Definition:</b> <a href="communication_8c_source.html#l00089">communication.c:89</a></div></div>
<div class="ttc" id="apacket_types_8h_html_a98c7ef0270800815d74cb371e50f93fb"><div class="ttname"><a href="packet_types_8h.html#a98c7ef0270800815d74cb371e50f93fb">Channel_t</a></div><div class="ttdeci">Channel_t</div><div class="ttdoc">Enumeration type for communication channels.</div><div class="ttdef"><b>Definition:</b> <a href="packet_types_8h_source.html#l00046">packetTypes.h:46</a></div></div>
<div class="ttc" id="acommunication_8h_html_aba9282db2114423e9c2e2f4ad32f550fa831e8f5cdb3ed97330b2e17502149d8f"><div class="ttname"><a href="communication_8h.html#aba9282db2114423e9c2e2f4ad32f550fa831e8f5cdb3ed97330b2e17502149d8f">LEVEL_INFO</a></div><div class="ttdeci">@ LEVEL_INFO</div><div class="ttdoc">message level for informational messages</div><div class="ttdef"><b>Definition:</b> <a href="communication_8h_source.html#l00029">communication.h:29</a></div></div>
<div class="ttc" id="acommunication_8h_html_a5431607792db0c22d879f78d7130505a"><div class="ttname"><a href="communication_8h.html#a5431607792db0c22d879f78d7130505a">communication_setCallback</a></div><div class="ttdeci">void communication_setCallback(const Channel_t channel, const ChannelCallback_t callback)</div><div class="ttdoc">Register a callback function with prototype as defined by ChannelCallback_t for a communication chann...</div><div class="ttdef"><b>Definition:</b> <a href="communication_8c_source.html#l00084">communication.c:84</a></div></div>
<div class="ttc" id="acommunication_8h_html_a141571b5deee9eb44ec4418e27498edb"><div class="ttname"><a href="communication_8h.html#a141571b5deee9eb44ec4418e27498edb">ChannelCallback_t</a></div><div class="ttdeci">void(* ChannelCallback_t)(const uint8_t *, const uint16_t)</div><div class="ttdoc">Type definition of a function pointer defining the channel callback functions for incoming packages.</div><div class="ttdef"><b>Definition:</b> <a href="communication_8h_source.html#l00099">communication.h:99</a></div></div>
<div class="ttc" id="acommunication_8h_html_af40c2f783a1c166ccfe60255767ae129"><div class="ttname"><a href="communication_8h.html#af40c2f783a1c166ccfe60255767ae129">communication_readPackets</a></div><div class="ttdeci">void communication_readPackets(void)</div><div class="ttdoc">Read all available packets from the corresponding UART FIFO buffer.</div><div class="ttdef"><b>Definition:</b> <a href="communication_8c_source.html#l00243">communication.c:243</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.html">lib</a></li><li class="navelem"><a class="el" href="dir_1b3272713a87fc9d111946fa64403b6d.html">communication</a></li><li class="navelem"><a class="el" href="communication_8h.html">communication.h</a></li>
    <li class="footer">Generated by <a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.8.20 </li>
  </ul>
</div>
</body>
</html>
