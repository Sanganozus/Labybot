<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.20"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>HWPRobot: uart.c Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">HWPRobot
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.20 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('uart_8c_source.html',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">uart.c</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="uart_8h.html">uart.h</a>&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;avr/io.h&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;avr/interrupt.h&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;util/delay.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160; </div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">// Macro for defining non-blocking or blocking (default) transmit,</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// used in uart_writeX()</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#ifndef UART_NONBLOCKING_TRANSMIT</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">    #define WAIT_FOR_FREE_SPACE while (tmpHead == uart-&gt;txTail);</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">    #define WAIT_FOR_FREE_SPACE</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; </div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * Head and tail for RX and TX buffers (cyclic buffers)</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * The error flag rxBufOverflow indicates if a buffer overflow has occurred in</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * the RX complete ISR. This flag can be read and cleared with</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * uart_isRXBufOverflowX().</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> * Note that the usable buffer size is UART*_*_BUFFER_SIZE - 1 !</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span>__attribute__((__packed__)) {</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    uint8_t rxHead;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    uint8_t rxTail;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    uint8_t txHead;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    uint8_t txTail;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    uint8_t rxBufOverflow;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;} uart_t;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">/** Macros for defining all functions from uart.h based on ID X of UART</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">        uart_writeX(const uint8_t data)</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">        uint8_t uart_readX(void)</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">        bool uart_availableX(void)</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">        bool uart_TXBufSpaceAvailableX(void)</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">        uint8_t uart_getTXBufSpaceX(void)</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">        bool uart_waitRXAvailableX(const uint8_t timeout)</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">        bool uart_isRXBufOverflowX(void)</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">        Note that ISRs are implemented in a separate .S file.</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#define uart_writeMacro(uartID) \</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">    void uart_write##uartID (const uint8_t data) { \</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">        volatile uart_t* uart = &amp;uart##uartID; \</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">        </span><span class="comment">/* locate next index for writing to TX buffer */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">        uint8_t tmpHead = (uart-&gt;txHead + 1) &amp; UART##uartID##_TX_MASK; \</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">        </span><span class="comment">/* if TX buffer is full, busy wait for free space */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">        WAIT_FOR_FREE_SPACE \</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">        </span><span class="comment">/* store data in TX buffer */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">        uart##uartID##_TX_buf[tmpHead] = data; \</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">        </span><span class="comment">/* make data available to txISR by updating head */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">        uart-&gt;txHead = tmpHead; \</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">        </span><span class="comment">/* enable UDRE interrupt */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">        UCSR##uartID##B = _BV(UDRIE##uartID) | _BV(RXCIE##uartID) | _BV(TXEN##uartID) | _BV(RXEN##uartID); \</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">#define uart_readMacro(uartID) \</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">    uint8_t uart_read##uartID(void) { \</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor">        volatile uart_t* uart = &amp;uart##uartID; \</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">        </span><span class="comment">/* wait for incoming bytes if RX buffer is empty (head == tail) */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">        while (uart-&gt;rxHead == uart-&gt;rxTail) ; \</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">        </span><span class="comment">/* calculate new tail after reading byte from RX buffer */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">        uint8_t tmpTail = (uart-&gt;rxTail + 1) &amp; UART##uartID##_RX_MASK; \</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">        </span><span class="comment">/* read data from RX buffer */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">        uint8_t data = uart##uartID##_RX_buf[tmpTail]; \</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">        </span><span class="comment">/* remove byte from RX buffer by updating tail */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">        uart-&gt;rxTail = tmpTail; \</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">        </span><span class="comment">/* return data */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">        return data; \</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">#define uart_availableMacro(uartID) \</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">    bool uart_available##uartID(void) { \</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor">        volatile uart_t* uart = &amp;uart##uartID; \</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">        return (uart-&gt;rxHead != uart-&gt;rxTail); \</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor">#define uart_TXBufSpaceAvailableMacro(uartID) \</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">    bool uart_TXBufSpaceAvailable##uartID(void) { \</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor">        volatile uart_t* uart = &amp;uart##uartID; \</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">        </span><span class="comment">/* locate next index for writing to TX buffer */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">        uint8_t tmpHead = (uart-&gt;txHead + 1) &amp; UART##uartID##_TX_MASK; \</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">        </span><span class="comment">/* if buffer is full, return false */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">        return (tmpHead != uart-&gt;txTail); \</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">#define uart_getTXBufSpaceMacro(uartID) \</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">    uint8_t uart_getTXBufSpace##uartID(void) { \</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="preprocessor">        volatile uart_t* uart = &amp;uart##uartID; \</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="preprocessor">        uint8_t tmpHead = uart-&gt;txHead; \</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor">        uint8_t tmpTail = uart-&gt;txTail; \</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="preprocessor">        if (tmpTail &gt; tmpHead) { \</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor">            return tmpTail - tmpHead - 1; \</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">        } else { \</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor">            return (UART##uartID##_TX_MASK - tmpHead) + tmpTail; \</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor">        } \</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">#define uart_waitRXAvailableMacro(uartID) \</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">    bool uart_waitRXAvailable##uartID(const uint8_t timeout) { \</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor">        uint8_t _timeout = timeout; \</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="preprocessor">        for (;;) { \</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor">            if (uart_available##uartID()) \</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">                return true; \</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="preprocessor">            if (_timeout-- == 0) \</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor">                return false; \</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">            _delay_ms(1); \</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor">        } \</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor">        return false; \</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor">#define uart_isRXBufOverflowMacro(uartID) \</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">    bool uart_isRXBufOverflow##uartID(void) { \</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor">        volatile uart_t* uart = &amp;uart##uartID; \</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="preprocessor">        uint8_t _overflow = uart-&gt;rxBufOverflow; \</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor">        uart-&gt;rxBufOverflow = 0; \</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">        return _overflow != 0; \</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor">    }</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor">#define uart_initMacro(uartID) \</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="preprocessor">    </span><span class="comment">/* calculate value of baud rate register to closely match BAUD_RATEX */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="preprocessor">    UBRR##uartID = (uint16_t)(((uint32_t)F_CPU + (uint32_t)BAUD_RATE##uartID * 8UL) / ((uint32_t)BAUD_RATE##uartID * 16UL) - 1UL); \</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor">    \</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">    </span><span class="comment">/* clear TX complete flag */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor">    UCSR##uartID##A = _BV(TXC##uartID); \</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="preprocessor">    </span><span class="comment">/* enable receiver and transmitter, enable RX complete interrupt (data register empty interrupt is activated when bytes need to be sent) */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="preprocessor">    UCSR##uartID##B = _BV(RXCIE##uartID) | _BV(TXEN##uartID) | _BV(RXEN##uartID); \</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor">    </span><span class="comment">/* set 8-bit character size, 1 stop bit, no parity */</span><span class="preprocessor"> \</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor">    UCSR##uartID##C = _BV(UCSZ##uartID##1) | _BV(UCSZ##uartID##0);</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="preprocessor">#ifdef USE_UART0</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="comment">// check buffer sizes for correctness</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="preprocessor">    #if (UART0_TX_BUFFER_SIZE &gt; 256)</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="preprocessor">        #error TX0 buffer size exceeds limit of 256 bytes</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">    #if (UART0_TX_BUFFER_SIZE &amp; (UART0_TX_BUFFER_SIZE - 1))</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor">        #error TX0 buffer size is not a power of 2</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor">    #if (UART0_RX_BUFFER_SIZE &gt; 256)</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor">        #error RX0 buffer size exceeds limit of 256 bytes</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="preprocessor">    #if (UART0_RX_BUFFER_SIZE &amp; (UART0_RX_BUFFER_SIZE - 1))</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="preprocessor">        #error RX0 buffer size is not a power of 2</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="comment">// bit masks for RX and TX buffer management (used for head and tail updates)</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">    #define UART0_RX_MASK (UART0_RX_BUFFER_SIZE - 1)</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="preprocessor">    #define UART0_TX_MASK (UART0_TX_BUFFER_SIZE - 1)</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="comment">// initialize data structure for head and tail of RX and TX buffers</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">volatile</span> uart_t uart0 = { .rxHead = 0, .rxTail= 0, .txHead = 0, .txTail = 0, .rxBufOverflow = 0 };</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keyword">volatile</span> uint8_t uart0_RX_buf[UART0_RX_BUFFER_SIZE]; <span class="comment">// RX buffer</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keyword">volatile</span> uint8_t uart0_TX_buf[UART0_TX_BUFFER_SIZE]; <span class="comment">// TX buffer</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="comment">// Implement all functions for UART 0</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    uart_writeMacro(0)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    uart_readMacro(0)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    uart_availableMacro(0)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    uart_TXBufSpaceAvailableMacro(0)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    uart_getTXBufSpaceMacro(0)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    uart_waitRXAvailableMacro(0)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    uart_isRXBufOverflowMacro(0)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="preprocessor">#ifdef USE_UART1</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="comment">// check buffer sizes for correctness</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="preprocessor">    #if (UART1_TX_BUFFER_SIZE &gt; 256)</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor">        #error TX1 buffer size exceeds limit of 256 bytes</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="preprocessor">    #if (UART1_TX_BUFFER_SIZE &amp; (UART1_TX_BUFFER_SIZE - 1))</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="preprocessor">        #error TX1 buffer size is not a power of 2</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="preprocessor">    #if (UART1_RX_BUFFER_SIZE &gt; 256)</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="preprocessor">        #error RX1 buffer size exceeds limit of 256 bytes</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor">    #if (UART1_RX_BUFFER_SIZE &amp; (UART1_RX_BUFFER_SIZE - 1))</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">        #error RX1 buffer size is not a power of 2</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="comment">// bit masks for RX and TX buffer management (used for head and tail updates)</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="preprocessor">    #define UART1_RX_MASK (UART1_RX_BUFFER_SIZE - 1)</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="preprocessor">    #define UART1_TX_MASK (UART1_TX_BUFFER_SIZE - 1)</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="comment">// initialize data structure for head and tail of RX and TX buffers</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">volatile</span> uart_t uart1 = { .rxHead = 0, .rxTail= 0, .txHead = 0, .txTail = 0, .rxBufOverflow = 0 };</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keyword">volatile</span> uint8_t uart1_RX_buf[UART1_RX_BUFFER_SIZE]; <span class="comment">// RX buffer</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">volatile</span> uint8_t uart1_TX_buf[UART1_TX_BUFFER_SIZE]; <span class="comment">// TX buffer</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="comment">// Implement all functions for UART 1</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    uart_writeMacro(1)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    uart_readMacro(1)</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    uart_availableMacro(1)</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    uart_TXBufSpaceAvailableMacro(1)</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    uart_getTXBufSpaceMacro(1)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    uart_waitRXAvailableMacro(1)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    uart_isRXBufOverflowMacro(1)</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="preprocessor">#ifdef USE_UART2</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="comment">// check buffer sizes for correctness</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="preprocessor">    #if (UART2_TX_BUFFER_SIZE &gt; 256)</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="preprocessor">        #error TX2 buffer size exceeds limit of 256 bytes</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="preprocessor">    #if (UART2_TX_BUFFER_SIZE &amp; (UART2_TX_BUFFER_SIZE - 1))</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="preprocessor">        #error TX2 buffer size is not a power of 2</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="preprocessor">    #if (UART2_RX_BUFFER_SIZE &gt; 256)</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">        #error RX2 buffer size exceeds limit of 256 bytes</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="preprocessor">    #if (UART2_RX_BUFFER_SIZE &amp; (UART2_RX_BUFFER_SIZE - 1))</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="preprocessor">        #error RX2 buffer size is not a power of 2</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="comment">// bit masks for RX and TX buffer management (used for head and tail updates)</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="preprocessor">    #define UART2_RX_MASK (UART2_RX_BUFFER_SIZE - 1)</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="preprocessor">    #define UART2_TX_MASK (UART2_TX_BUFFER_SIZE - 1)</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="comment">// initialize data structure for head and tail of RX and TX buffers</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">volatile</span> uart_t uart2 = { .rxHead = 0, .rxTail= 0, .txHead = 0, .txTail = 0, .rxBufOverflow = 0 };</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">volatile</span> uint8_t uart2_RX_buf[UART2_RX_BUFFER_SIZE]; <span class="comment">// RX buffer</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">volatile</span> uint8_t uart2_TX_buf[UART2_TX_BUFFER_SIZE]; <span class="comment">// TX buffer</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="comment">// Implement all functions for UART 2</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    uart_writeMacro(2)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    uart_readMacro(2)</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    uart_availableMacro(2)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    uart_TXBufSpaceAvailableMacro(2)</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    uart_getTXBufSpaceMacro(2)</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    uart_waitRXAvailableMacro(2)</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    uart_isRXBufOverflowMacro(2)</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; </div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="preprocessor">#ifdef USE_UART3</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="comment">// check buffer sizes for correctness</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="preprocessor">    #if (UART3_TX_BUFFER_SIZE &gt; 256)</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="preprocessor">        #error TX3 buffer size exceeds limit of 256 bytes</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="preprocessor">    #if (UART3_TX_BUFFER_SIZE &amp; (UART3_TX_BUFFER_SIZE - 1))</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="preprocessor">        #error TX3 buffer size is not a power of 2</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="preprocessor">    #if (UART3_RX_BUFFER_SIZE &gt; 256)</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="preprocessor">        #error RX3 buffer size exceeds limit of 256 bytes</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="preprocessor">    #if (UART3_RX_BUFFER_SIZE &amp; (UART3_RX_BUFFER_SIZE - 1))</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="preprocessor">        #error RX3 buffer size is not a power of 2</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="comment">// bit masks for RX and TX buffer management (used for head and tail updates)</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="preprocessor">    #define UART3_RX_MASK (UART3_RX_BUFFER_SIZE - 1)</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="preprocessor">    #define UART3_TX_MASK (UART3_TX_BUFFER_SIZE - 1)</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="comment">// initialize data structure for head and tail of RX and TX buffers</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keyword">volatile</span> uart_t uart3 = { .rxHead = 0, .rxTail= 0, .txHead = 0, .txTail = 0, .rxBufOverflow = 0 };</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keyword">volatile</span> uint8_t uart3_RX_buf[UART3_RX_BUFFER_SIZE]; <span class="comment">// RX buffer</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keyword">volatile</span> uint8_t uart3_TX_buf[UART3_TX_BUFFER_SIZE]; <span class="comment">// TX buffer</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="comment">// Implement all functions for UART 3</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    uart_writeMacro(3)</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    uart_readMacro(3)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    uart_availableMacro(3)</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    uart_TXBufSpaceAvailableMacro(3)</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    uart_getTXBufSpaceMacro(3)</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    uart_waitRXAvailableMacro(3)</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    uart_isRXBufOverflowMacro(3)</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160; </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno"><a class="line" href="uart_8h.html#a0c0ca72359ddf28dcd15900dfba19343">  284</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="uart_8h.html#a0c0ca72359ddf28dcd15900dfba19343">uart_init</a>() {</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="preprocessor">#ifdef USE_UART0</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="comment">// disable power reduction of USART0</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    PRR0 &amp;= ~_BV(PRUSART0);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    uart_initMacro(0)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="preprocessor">#ifdef USE_UART1</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="comment">// disable power reduction of USART1</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    PRR1 &amp;= ~_BV(PRUSART1);</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    uart_initMacro(1)</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="preprocessor">#ifdef USE_UART2</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="comment">// disable power reduction of USART2</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    PRR1 &amp;= ~_BV(PRUSART2);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    uart_initMacro(2)</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="preprocessor">#ifdef USE_UART3</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="comment">// disable power reduction of USART3</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    PRR1 &amp;= ~_BV(PRUSART3);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    uart_initMacro(3)</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="auart_8h_html_a0c0ca72359ddf28dcd15900dfba19343"><div class="ttname"><a href="uart_8h.html#a0c0ca72359ddf28dcd15900dfba19343">uart_init</a></div><div class="ttdeci">void uart_init(void)</div><div class="ttdoc">Initialize the UART library.</div><div class="ttdef"><b>Definition:</b> <a href="uart_8c_source.html#l00284">uart.c:284</a></div></div>
<div class="ttc" id="auart_8h_html"><div class="ttname"><a href="uart_8h.html">uart.h</a></div><div class="ttdoc">UART library: controls UART 0,1,2,3 via interrupts and FIFO buffers.</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.html">lib</a></li><li class="navelem"><a class="el" href="dir_5d0aa56803c8250a5d891761f6bfc5c7.html">io</a></li><li class="navelem"><a class="el" href="dir_ffe32ea58ceba9a965f60626da9b0d3b.html">uart</a></li><li class="navelem"><b>uart.c</b></li>
    <li class="footer">Generated by <a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.8.20 </li>
  </ul>
</div>
</body>
</html>
