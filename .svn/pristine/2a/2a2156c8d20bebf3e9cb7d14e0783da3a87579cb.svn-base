<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.20"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>HWPRobot: uart.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">HWPRobot
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.20 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('uart_8h.html',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">uart.h File Reference<div class="ingroups"><a class="el" href="group__lib.html">lib</a> &raquo; <a class="el" href="group__io.html">io</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>UART library: controls UART 0,1,2,3 via interrupts and FIFO buffers.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &lt;<a class="el" href="uart__cfg_8h_source.html">cfg/io/uart/uart_cfg.h</a>&gt;</code><br />
<code>#include &lt;stdint.h&gt;</code><br />
<code>#include &lt;stdbool.h&gt;</code><br />
</div>
<p><a href="uart_8h_source.html">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a0c0ca72359ddf28dcd15900dfba19343"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a0c0ca72359ddf28dcd15900dfba19343">uart_init</a> (void)</td></tr>
<tr class="memdesc:a0c0ca72359ddf28dcd15900dfba19343"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the UART library.  <a href="uart_8h.html#a0c0ca72359ddf28dcd15900dfba19343">More...</a><br /></td></tr>
<tr class="separator:a0c0ca72359ddf28dcd15900dfba19343"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adef0c98bd51ce9a560f138349d3eb655"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#adef0c98bd51ce9a560f138349d3eb655">uart_read0</a> (void)</td></tr>
<tr class="memdesc:adef0c98bd51ce9a560f138349d3eb655"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read a single byte from the FIFO RX buffer of the corresponding UART.  <a href="uart_8h.html#adef0c98bd51ce9a560f138349d3eb655">More...</a><br /></td></tr>
<tr class="separator:adef0c98bd51ce9a560f138349d3eb655"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61d4093363486094ae4068cbd4363f66"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a61d4093363486094ae4068cbd4363f66">uart_read1</a> (void)</td></tr>
<tr class="memdesc:a61d4093363486094ae4068cbd4363f66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read a single byte from the FIFO RX buffer of the corresponding UART.  <a href="uart_8h.html#a61d4093363486094ae4068cbd4363f66">More...</a><br /></td></tr>
<tr class="separator:a61d4093363486094ae4068cbd4363f66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d81b695c602c30d6ffa9d0ff968130e"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a0d81b695c602c30d6ffa9d0ff968130e">uart_read2</a> (void)</td></tr>
<tr class="memdesc:a0d81b695c602c30d6ffa9d0ff968130e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read a single byte from the FIFO RX buffer of the corresponding UART.  <a href="uart_8h.html#a0d81b695c602c30d6ffa9d0ff968130e">More...</a><br /></td></tr>
<tr class="separator:a0d81b695c602c30d6ffa9d0ff968130e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a35103ddce6d3de53e41dc791b39931"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a6a35103ddce6d3de53e41dc791b39931">uart_read3</a> (void)</td></tr>
<tr class="memdesc:a6a35103ddce6d3de53e41dc791b39931"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read a single byte from the FIFO RX buffer of the corresponding UART.  <a href="uart_8h.html#a6a35103ddce6d3de53e41dc791b39931">More...</a><br /></td></tr>
<tr class="separator:a6a35103ddce6d3de53e41dc791b39931"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a607ec44032a01503bb7cdc0ce1f46dd3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a607ec44032a01503bb7cdc0ce1f46dd3">uart_write0</a> (const uint8_t data)</td></tr>
<tr class="memdesc:a607ec44032a01503bb7cdc0ce1f46dd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write a single byte to the FIFO TX buffer of the corresponding UART.  <a href="uart_8h.html#a607ec44032a01503bb7cdc0ce1f46dd3">More...</a><br /></td></tr>
<tr class="separator:a607ec44032a01503bb7cdc0ce1f46dd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a174534ee2e5dcb4d0a522ea27338c138"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a174534ee2e5dcb4d0a522ea27338c138">uart_write1</a> (const uint8_t data)</td></tr>
<tr class="memdesc:a174534ee2e5dcb4d0a522ea27338c138"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write a single byte to the FIFO TX buffer of the corresponding UART.  <a href="uart_8h.html#a174534ee2e5dcb4d0a522ea27338c138">More...</a><br /></td></tr>
<tr class="separator:a174534ee2e5dcb4d0a522ea27338c138"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad29486d5d924df23162551fb97ad24c1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#ad29486d5d924df23162551fb97ad24c1">uart_write2</a> (const uint8_t data)</td></tr>
<tr class="memdesc:ad29486d5d924df23162551fb97ad24c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write a single byte to the FIFO TX buffer of the corresponding UART.  <a href="uart_8h.html#ad29486d5d924df23162551fb97ad24c1">More...</a><br /></td></tr>
<tr class="separator:ad29486d5d924df23162551fb97ad24c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d88cb0efa95a693510abbd9c249e649"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a3d88cb0efa95a693510abbd9c249e649">uart_write3</a> (const uint8_t data)</td></tr>
<tr class="memdesc:a3d88cb0efa95a693510abbd9c249e649"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write a single byte to the FIFO TX buffer of the corresponding UART.  <a href="uart_8h.html#a3d88cb0efa95a693510abbd9c249e649">More...</a><br /></td></tr>
<tr class="separator:a3d88cb0efa95a693510abbd9c249e649"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae762b4583a46d34eb4e534531d30b87"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#aae762b4583a46d34eb4e534531d30b87">uart_available0</a> (void)</td></tr>
<tr class="memdesc:aae762b4583a46d34eb4e534531d30b87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a single byte can be read from the receive FIFO buffer via <code>uart_readX()</code> without blocking.  <a href="uart_8h.html#aae762b4583a46d34eb4e534531d30b87">More...</a><br /></td></tr>
<tr class="separator:aae762b4583a46d34eb4e534531d30b87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68bad26d85f6cc5849f760cf35664146"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a68bad26d85f6cc5849f760cf35664146">uart_available1</a> (void)</td></tr>
<tr class="memdesc:a68bad26d85f6cc5849f760cf35664146"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a single byte can be read from the receive FIFO buffer via <code>uart_readX()</code> without blocking.  <a href="uart_8h.html#a68bad26d85f6cc5849f760cf35664146">More...</a><br /></td></tr>
<tr class="separator:a68bad26d85f6cc5849f760cf35664146"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5fa61b215cc7643ebbe5d843b5ee080"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#ab5fa61b215cc7643ebbe5d843b5ee080">uart_available2</a> (void)</td></tr>
<tr class="memdesc:ab5fa61b215cc7643ebbe5d843b5ee080"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a single byte can be read from the receive FIFO buffer via <code>uart_readX()</code> without blocking.  <a href="uart_8h.html#ab5fa61b215cc7643ebbe5d843b5ee080">More...</a><br /></td></tr>
<tr class="separator:ab5fa61b215cc7643ebbe5d843b5ee080"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac77ab3689025e0e839e0b37b568e6e8b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#ac77ab3689025e0e839e0b37b568e6e8b">uart_available3</a> (void)</td></tr>
<tr class="memdesc:ac77ab3689025e0e839e0b37b568e6e8b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a single byte can be read from the receive FIFO buffer via <code>uart_readX()</code> without blocking.  <a href="uart_8h.html#ac77ab3689025e0e839e0b37b568e6e8b">More...</a><br /></td></tr>
<tr class="separator:ac77ab3689025e0e839e0b37b568e6e8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3950ab0dd438a47b0f606ffbc202f8bc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a3950ab0dd438a47b0f606ffbc202f8bc">uart_waitRXAvailable0</a> (const uint8_t timeout)</td></tr>
<tr class="memdesc:a3950ab0dd438a47b0f606ffbc202f8bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait until at least one byte is in RX buffer or until a timeout occurs.  <a href="uart_8h.html#a3950ab0dd438a47b0f606ffbc202f8bc">More...</a><br /></td></tr>
<tr class="separator:a3950ab0dd438a47b0f606ffbc202f8bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae81dd23875a152dcfe4ca556192137fd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#ae81dd23875a152dcfe4ca556192137fd">uart_waitRXAvailable1</a> (const uint8_t timeout)</td></tr>
<tr class="memdesc:ae81dd23875a152dcfe4ca556192137fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait until at least one byte is in RX buffer or until a timeout occurs.  <a href="uart_8h.html#ae81dd23875a152dcfe4ca556192137fd">More...</a><br /></td></tr>
<tr class="separator:ae81dd23875a152dcfe4ca556192137fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e3364a8ba62f9f356baad7ce1f840dc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a2e3364a8ba62f9f356baad7ce1f840dc">uart_waitRXAvailable2</a> (const uint8_t timeout)</td></tr>
<tr class="memdesc:a2e3364a8ba62f9f356baad7ce1f840dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait until at least one byte is in RX buffer or until a timeout occurs.  <a href="uart_8h.html#a2e3364a8ba62f9f356baad7ce1f840dc">More...</a><br /></td></tr>
<tr class="separator:a2e3364a8ba62f9f356baad7ce1f840dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed52c6771b926eddd8e74236f1fb3516"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#aed52c6771b926eddd8e74236f1fb3516">uart_waitRXAvailable3</a> (const uint8_t timeout)</td></tr>
<tr class="memdesc:aed52c6771b926eddd8e74236f1fb3516"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wait until at least one byte is in RX buffer or until a timeout occurs.  <a href="uart_8h.html#aed52c6771b926eddd8e74236f1fb3516">More...</a><br /></td></tr>
<tr class="separator:aed52c6771b926eddd8e74236f1fb3516"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44639659f0c9722d0b36b46180f0174c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a44639659f0c9722d0b36b46180f0174c">uart_TXBufSpaceAvailable0</a> (void)</td></tr>
<tr class="memdesc:a44639659f0c9722d0b36b46180f0174c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a single byte can be written to the FIFO TX buffer via <code>uart_writeX()</code> without blocking.  <a href="uart_8h.html#a44639659f0c9722d0b36b46180f0174c">More...</a><br /></td></tr>
<tr class="separator:a44639659f0c9722d0b36b46180f0174c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4201db91e16beb0e4e0908767ff6d025"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a4201db91e16beb0e4e0908767ff6d025">uart_TXBufSpaceAvailable1</a> (void)</td></tr>
<tr class="memdesc:a4201db91e16beb0e4e0908767ff6d025"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a single byte can be written to the FIFO TX buffer via <code>uart_writeX()</code> without blocking.  <a href="uart_8h.html#a4201db91e16beb0e4e0908767ff6d025">More...</a><br /></td></tr>
<tr class="separator:a4201db91e16beb0e4e0908767ff6d025"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a82f1aeb4ca66de7e2ef72c5904b096"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a2a82f1aeb4ca66de7e2ef72c5904b096">uart_TXBufSpaceAvailable2</a> (void)</td></tr>
<tr class="memdesc:a2a82f1aeb4ca66de7e2ef72c5904b096"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a single byte can be written to the FIFO TX buffer via <code>uart_writeX()</code> without blocking.  <a href="uart_8h.html#a2a82f1aeb4ca66de7e2ef72c5904b096">More...</a><br /></td></tr>
<tr class="separator:a2a82f1aeb4ca66de7e2ef72c5904b096"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a281bdcbd1b8056dd608eba03585f7a65"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a281bdcbd1b8056dd608eba03585f7a65">uart_TXBufSpaceAvailable3</a> (void)</td></tr>
<tr class="memdesc:a281bdcbd1b8056dd608eba03585f7a65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if a single byte can be written to the FIFO TX buffer via <code>uart_writeX()</code> without blocking.  <a href="uart_8h.html#a281bdcbd1b8056dd608eba03585f7a65">More...</a><br /></td></tr>
<tr class="separator:a281bdcbd1b8056dd608eba03585f7a65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37ff23b7942dd73cfb1eba2cd02de7b5"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a37ff23b7942dd73cfb1eba2cd02de7b5">uart_getTXBufSpace0</a> (void)</td></tr>
<tr class="memdesc:a37ff23b7942dd73cfb1eba2cd02de7b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determine the number of bytes which can be written to the FIFO TX buffer via <code>uart_write()</code> without blocking.  <a href="uart_8h.html#a37ff23b7942dd73cfb1eba2cd02de7b5">More...</a><br /></td></tr>
<tr class="separator:a37ff23b7942dd73cfb1eba2cd02de7b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2f090e0ed4ae01f5b9f254ce870f101"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#ad2f090e0ed4ae01f5b9f254ce870f101">uart_getTXBufSpace1</a> (void)</td></tr>
<tr class="memdesc:ad2f090e0ed4ae01f5b9f254ce870f101"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determine the number of bytes which can be written to the FIFO TX buffer via <code>uart_write()</code> without blocking.  <a href="uart_8h.html#ad2f090e0ed4ae01f5b9f254ce870f101">More...</a><br /></td></tr>
<tr class="separator:ad2f090e0ed4ae01f5b9f254ce870f101"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72e131467feee2fbf60feddc073300b1"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a72e131467feee2fbf60feddc073300b1">uart_getTXBufSpace2</a> (void)</td></tr>
<tr class="memdesc:a72e131467feee2fbf60feddc073300b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determine the number of bytes which can be written to the FIFO TX buffer via <code>uart_write()</code> without blocking.  <a href="uart_8h.html#a72e131467feee2fbf60feddc073300b1">More...</a><br /></td></tr>
<tr class="separator:a72e131467feee2fbf60feddc073300b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aceb1a1f4a130570e991f949ada70208b"><td class="memItemLeft" align="right" valign="top">uint8_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#aceb1a1f4a130570e991f949ada70208b">uart_getTXBufSpace3</a> (void)</td></tr>
<tr class="memdesc:aceb1a1f4a130570e991f949ada70208b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determine the number of bytes which can be written to the FIFO TX buffer via <code>uart_write()</code> without blocking.  <a href="uart_8h.html#aceb1a1f4a130570e991f949ada70208b">More...</a><br /></td></tr>
<tr class="separator:aceb1a1f4a130570e991f949ada70208b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab77b33ebf95092243756ff98d18d4db3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#ab77b33ebf95092243756ff98d18d4db3">uart_isRXBufOverflow0</a> (void)</td></tr>
<tr class="memdesc:ab77b33ebf95092243756ff98d18d4db3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determine if an overflow of the UART RX buffer has occurred during the RX complete ISR and clear the error flag.  <a href="uart_8h.html#ab77b33ebf95092243756ff98d18d4db3">More...</a><br /></td></tr>
<tr class="separator:ab77b33ebf95092243756ff98d18d4db3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cf3bb4e34f8bf522af002a1daa6c190"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#a0cf3bb4e34f8bf522af002a1daa6c190">uart_isRXBufOverflow1</a> (void)</td></tr>
<tr class="memdesc:a0cf3bb4e34f8bf522af002a1daa6c190"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determine if an overflow of the UART RX buffer has occurred during the RX complete ISR and clear the error flag.  <a href="uart_8h.html#a0cf3bb4e34f8bf522af002a1daa6c190">More...</a><br /></td></tr>
<tr class="separator:a0cf3bb4e34f8bf522af002a1daa6c190"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa76f44fb7b77c54424bbbb0f3e070ea0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#aa76f44fb7b77c54424bbbb0f3e070ea0">uart_isRXBufOverflow2</a> (void)</td></tr>
<tr class="memdesc:aa76f44fb7b77c54424bbbb0f3e070ea0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determine if an overflow of the UART RX buffer has occurred during the RX complete ISR and clear the error flag.  <a href="uart_8h.html#aa76f44fb7b77c54424bbbb0f3e070ea0">More...</a><br /></td></tr>
<tr class="separator:aa76f44fb7b77c54424bbbb0f3e070ea0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf467075cc07d156cb5971b63c131264"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="uart_8h.html#acf467075cc07d156cb5971b63c131264">uart_isRXBufOverflow3</a> (void)</td></tr>
<tr class="memdesc:acf467075cc07d156cb5971b63c131264"><td class="mdescLeft">&#160;</td><td class="mdescRight">Determine if an overflow of the UART RX buffer has occurred during the RX complete ISR and clear the error flag.  <a href="uart_8h.html#acf467075cc07d156cb5971b63c131264">More...</a><br /></td></tr>
<tr class="separator:acf467075cc07d156cb5971b63c131264"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>UART library: controls UART 0,1,2,3 via interrupts and FIFO buffers. </p>
<p>All functions are interrupt safe concerning UDRE and RX complete interrupt. </p>

<p class="definition">Definition in file <a class="el" href="uart_8h_source.html">uart.h</a>.</p>
</div><h2 class="groupheader">Function Documentation</h2>
<a id="a0c0ca72359ddf28dcd15900dfba19343"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c0ca72359ddf28dcd15900dfba19343">&#9670;&nbsp;</a></span>uart_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void uart_init </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the UART library. </p>
<p>Must be called before any other library function. Global interrupts must be enabled manually after calling this function.</p>
<p>See also the corresponding configuration file: <a class="el" href="uart__cfg_8h.html" title="User configuration for UART and communication library.">src/cfg/io/uart/uart_cfg.h</a> </p>

<p class="definition">Definition at line <a class="el" href="uart_8c_source.html#l00284">284</a> of file <a class="el" href="uart_8c_source.html">uart.c</a>.</p>

</div>
</div>
<a id="adef0c98bd51ce9a560f138349d3eb655"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adef0c98bd51ce9a560f138349d3eb655">&#9670;&nbsp;</a></span>uart_read0()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t uart_read0 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Read a single byte from the FIFO RX buffer of the corresponding UART. </p>
<p>Blocks as long as there are no bytes in the buffer. Check <code>uart_availableX()</code> if you want to make sure <code>uart_readX()</code> won't block.</p>
<p>Due to blocking, this function must not be called from interrupt context.</p>
<dl class="section return"><dt>Returns</dt><dd>the retrieved byte </dd></dl>

</div>
</div>
<a id="a61d4093363486094ae4068cbd4363f66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61d4093363486094ae4068cbd4363f66">&#9670;&nbsp;</a></span>uart_read1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t uart_read1 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Read a single byte from the FIFO RX buffer of the corresponding UART. </p>
<p>Blocks as long as there are no bytes in the buffer. Check <code>uart_availableX()</code> if you want to make sure <code>uart_readX()</code> won't block.</p>
<p>Due to blocking, this function must not be called from interrupt context.</p>
<dl class="section return"><dt>Returns</dt><dd>the retrieved byte </dd></dl>

</div>
</div>
<a id="a0d81b695c602c30d6ffa9d0ff968130e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d81b695c602c30d6ffa9d0ff968130e">&#9670;&nbsp;</a></span>uart_read2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t uart_read2 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Read a single byte from the FIFO RX buffer of the corresponding UART. </p>
<p>Blocks as long as there are no bytes in the buffer. Check <code>uart_availableX()</code> if you want to make sure <code>uart_readX()</code> won't block.</p>
<p>Due to blocking, this function must not be called from interrupt context.</p>
<dl class="section return"><dt>Returns</dt><dd>the retrieved byte </dd></dl>

</div>
</div>
<a id="a6a35103ddce6d3de53e41dc791b39931"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a35103ddce6d3de53e41dc791b39931">&#9670;&nbsp;</a></span>uart_read3()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t uart_read3 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Read a single byte from the FIFO RX buffer of the corresponding UART. </p>
<p>Blocks as long as there are no bytes in the buffer. Check <code>uart_availableX()</code> if you want to make sure <code>uart_readX()</code> won't block.</p>
<p>Due to blocking, this function must not be called from interrupt context.</p>
<dl class="section return"><dt>Returns</dt><dd>the retrieved byte </dd></dl>

</div>
</div>
<a id="a607ec44032a01503bb7cdc0ce1f46dd3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a607ec44032a01503bb7cdc0ce1f46dd3">&#9670;&nbsp;</a></span>uart_write0()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void uart_write0 </td>
          <td>(</td>
          <td class="paramtype">const uint8_t&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Write a single byte to the FIFO TX buffer of the corresponding UART. </p>
<p>Blocks as long as there is no space in the buffer. Check <code>uart_TXBufSpaceAvailableX()</code> if you want to make sure <code>uart_writeX()</code> won't block.</p>
<p>Due to blocking, this function must not be called from interrupt context.</p>
<p>Note: Blocking can be disabled by compiling with the symbol UART_NONBLOCKING_TRANSMIT defined. If the buffer is full in this case, the byte to be transmitted is discarded.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>the byte to be placed into the TX buffer </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a174534ee2e5dcb4d0a522ea27338c138"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a174534ee2e5dcb4d0a522ea27338c138">&#9670;&nbsp;</a></span>uart_write1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void uart_write1 </td>
          <td>(</td>
          <td class="paramtype">const uint8_t&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Write a single byte to the FIFO TX buffer of the corresponding UART. </p>
<p>Blocks as long as there is no space in the buffer. Check <code>uart_TXBufSpaceAvailableX()</code> if you want to make sure <code>uart_writeX()</code> won't block.</p>
<p>Due to blocking, this function must not be called from interrupt context.</p>
<p>Note: Blocking can be disabled by compiling with the symbol UART_NONBLOCKING_TRANSMIT defined. If the buffer is full in this case, the byte to be transmitted is discarded.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>the byte to be placed into the TX buffer </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad29486d5d924df23162551fb97ad24c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad29486d5d924df23162551fb97ad24c1">&#9670;&nbsp;</a></span>uart_write2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void uart_write2 </td>
          <td>(</td>
          <td class="paramtype">const uint8_t&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Write a single byte to the FIFO TX buffer of the corresponding UART. </p>
<p>Blocks as long as there is no space in the buffer. Check <code>uart_TXBufSpaceAvailableX()</code> if you want to make sure <code>uart_writeX()</code> won't block.</p>
<p>Due to blocking, this function must not be called from interrupt context.</p>
<p>Note: Blocking can be disabled by compiling with the symbol UART_NONBLOCKING_TRANSMIT defined. If the buffer is full in this case, the byte to be transmitted is discarded.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>the byte to be placed into the TX buffer </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a3d88cb0efa95a693510abbd9c249e649"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d88cb0efa95a693510abbd9c249e649">&#9670;&nbsp;</a></span>uart_write3()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void uart_write3 </td>
          <td>(</td>
          <td class="paramtype">const uint8_t&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Write a single byte to the FIFO TX buffer of the corresponding UART. </p>
<p>Blocks as long as there is no space in the buffer. Check <code>uart_TXBufSpaceAvailableX()</code> if you want to make sure <code>uart_writeX()</code> won't block.</p>
<p>Due to blocking, this function must not be called from interrupt context.</p>
<p>Note: Blocking can be disabled by compiling with the symbol UART_NONBLOCKING_TRANSMIT defined. If the buffer is full in this case, the byte to be transmitted is discarded.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">data</td><td>the byte to be placed into the TX buffer </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aae762b4583a46d34eb4e534531d30b87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae762b4583a46d34eb4e534531d30b87">&#9670;&nbsp;</a></span>uart_available0()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool uart_available0 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if a single byte can be read from the receive FIFO buffer via <code>uart_readX()</code> without blocking. </p>
<dl class="section return"><dt>Returns</dt><dd>true if a single byte can be read without blocking, otherwise false </dd></dl>

</div>
</div>
<a id="a68bad26d85f6cc5849f760cf35664146"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68bad26d85f6cc5849f760cf35664146">&#9670;&nbsp;</a></span>uart_available1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool uart_available1 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if a single byte can be read from the receive FIFO buffer via <code>uart_readX()</code> without blocking. </p>
<dl class="section return"><dt>Returns</dt><dd>true if a single byte can be read without blocking, otherwise false </dd></dl>

</div>
</div>
<a id="ab5fa61b215cc7643ebbe5d843b5ee080"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5fa61b215cc7643ebbe5d843b5ee080">&#9670;&nbsp;</a></span>uart_available2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool uart_available2 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if a single byte can be read from the receive FIFO buffer via <code>uart_readX()</code> without blocking. </p>
<dl class="section return"><dt>Returns</dt><dd>true if a single byte can be read without blocking, otherwise false </dd></dl>

</div>
</div>
<a id="ac77ab3689025e0e839e0b37b568e6e8b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac77ab3689025e0e839e0b37b568e6e8b">&#9670;&nbsp;</a></span>uart_available3()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool uart_available3 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if a single byte can be read from the receive FIFO buffer via <code>uart_readX()</code> without blocking. </p>
<dl class="section return"><dt>Returns</dt><dd>true if a single byte can be read without blocking, otherwise false </dd></dl>

</div>
</div>
<a id="a3950ab0dd438a47b0f606ffbc202f8bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3950ab0dd438a47b0f606ffbc202f8bc">&#9670;&nbsp;</a></span>uart_waitRXAvailable0()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool uart_waitRXAvailable0 </td>
          <td>(</td>
          <td class="paramtype">const uint8_t&#160;</td>
          <td class="paramname"><em>timeout</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wait until at least one byte is in RX buffer or until a timeout occurs. </p>
<p>Due to blocking, this function must not be called from interrupt context.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">timeout</td><td>timeout in milliseconds </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if at least one byte is available in RX buffer, false if timeout occurred </dd></dl>

</div>
</div>
<a id="ae81dd23875a152dcfe4ca556192137fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae81dd23875a152dcfe4ca556192137fd">&#9670;&nbsp;</a></span>uart_waitRXAvailable1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool uart_waitRXAvailable1 </td>
          <td>(</td>
          <td class="paramtype">const uint8_t&#160;</td>
          <td class="paramname"><em>timeout</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wait until at least one byte is in RX buffer or until a timeout occurs. </p>
<p>Due to blocking, this function must not be called from interrupt context.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">timeout</td><td>timeout in milliseconds </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if at least one byte is available in RX buffer, false if timeout occurred </dd></dl>

</div>
</div>
<a id="a2e3364a8ba62f9f356baad7ce1f840dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e3364a8ba62f9f356baad7ce1f840dc">&#9670;&nbsp;</a></span>uart_waitRXAvailable2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool uart_waitRXAvailable2 </td>
          <td>(</td>
          <td class="paramtype">const uint8_t&#160;</td>
          <td class="paramname"><em>timeout</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wait until at least one byte is in RX buffer or until a timeout occurs. </p>
<p>Due to blocking, this function must not be called from interrupt context.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">timeout</td><td>timeout in milliseconds </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if at least one byte is available in RX buffer, false if timeout occurred </dd></dl>

</div>
</div>
<a id="aed52c6771b926eddd8e74236f1fb3516"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed52c6771b926eddd8e74236f1fb3516">&#9670;&nbsp;</a></span>uart_waitRXAvailable3()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool uart_waitRXAvailable3 </td>
          <td>(</td>
          <td class="paramtype">const uint8_t&#160;</td>
          <td class="paramname"><em>timeout</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wait until at least one byte is in RX buffer or until a timeout occurs. </p>
<p>Due to blocking, this function must not be called from interrupt context.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">timeout</td><td>timeout in milliseconds </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if at least one byte is available in RX buffer, false if timeout occurred </dd></dl>

</div>
</div>
<a id="a44639659f0c9722d0b36b46180f0174c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44639659f0c9722d0b36b46180f0174c">&#9670;&nbsp;</a></span>uart_TXBufSpaceAvailable0()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool uart_TXBufSpaceAvailable0 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if a single byte can be written to the FIFO TX buffer via <code>uart_writeX()</code> without blocking. </p>
<dl class="section return"><dt>Returns</dt><dd>true if a single byte can be written without blocking, otherwise false </dd></dl>

</div>
</div>
<a id="a4201db91e16beb0e4e0908767ff6d025"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4201db91e16beb0e4e0908767ff6d025">&#9670;&nbsp;</a></span>uart_TXBufSpaceAvailable1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool uart_TXBufSpaceAvailable1 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if a single byte can be written to the FIFO TX buffer via <code>uart_writeX()</code> without blocking. </p>
<dl class="section return"><dt>Returns</dt><dd>true if a single byte can be written without blocking, otherwise false </dd></dl>

</div>
</div>
<a id="a2a82f1aeb4ca66de7e2ef72c5904b096"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a82f1aeb4ca66de7e2ef72c5904b096">&#9670;&nbsp;</a></span>uart_TXBufSpaceAvailable2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool uart_TXBufSpaceAvailable2 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if a single byte can be written to the FIFO TX buffer via <code>uart_writeX()</code> without blocking. </p>
<dl class="section return"><dt>Returns</dt><dd>true if a single byte can be written without blocking, otherwise false </dd></dl>

</div>
</div>
<a id="a281bdcbd1b8056dd608eba03585f7a65"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a281bdcbd1b8056dd608eba03585f7a65">&#9670;&nbsp;</a></span>uart_TXBufSpaceAvailable3()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool uart_TXBufSpaceAvailable3 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if a single byte can be written to the FIFO TX buffer via <code>uart_writeX()</code> without blocking. </p>
<dl class="section return"><dt>Returns</dt><dd>true if a single byte can be written without blocking, otherwise false </dd></dl>

</div>
</div>
<a id="a37ff23b7942dd73cfb1eba2cd02de7b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37ff23b7942dd73cfb1eba2cd02de7b5">&#9670;&nbsp;</a></span>uart_getTXBufSpace0()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t uart_getTXBufSpace0 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine the number of bytes which can be written to the FIFO TX buffer via <code>uart_write()</code> without blocking. </p>
<dl class="section return"><dt>Returns</dt><dd>number of bytes available in FIFO TX buffer </dd></dl>

</div>
</div>
<a id="ad2f090e0ed4ae01f5b9f254ce870f101"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2f090e0ed4ae01f5b9f254ce870f101">&#9670;&nbsp;</a></span>uart_getTXBufSpace1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t uart_getTXBufSpace1 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine the number of bytes which can be written to the FIFO TX buffer via <code>uart_write()</code> without blocking. </p>
<dl class="section return"><dt>Returns</dt><dd>number of bytes available in FIFO TX buffer </dd></dl>

</div>
</div>
<a id="a72e131467feee2fbf60feddc073300b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72e131467feee2fbf60feddc073300b1">&#9670;&nbsp;</a></span>uart_getTXBufSpace2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t uart_getTXBufSpace2 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine the number of bytes which can be written to the FIFO TX buffer via <code>uart_write()</code> without blocking. </p>
<dl class="section return"><dt>Returns</dt><dd>number of bytes available in FIFO TX buffer </dd></dl>

</div>
</div>
<a id="aceb1a1f4a130570e991f949ada70208b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aceb1a1f4a130570e991f949ada70208b">&#9670;&nbsp;</a></span>uart_getTXBufSpace3()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">uint8_t uart_getTXBufSpace3 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine the number of bytes which can be written to the FIFO TX buffer via <code>uart_write()</code> without blocking. </p>
<dl class="section return"><dt>Returns</dt><dd>number of bytes available in FIFO TX buffer </dd></dl>

</div>
</div>
<a id="ab77b33ebf95092243756ff98d18d4db3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab77b33ebf95092243756ff98d18d4db3">&#9670;&nbsp;</a></span>uart_isRXBufOverflow0()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool uart_isRXBufOverflow0 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine if an overflow of the UART RX buffer has occurred during the RX complete ISR and clear the error flag. </p>
<p>When this happens, additional data read from the UART is discarded and a packet can not be fully received.</p>
<dl class="section return"><dt>Returns</dt><dd>true if overflow occurred, false otherwise </dd></dl>

</div>
</div>
<a id="a0cf3bb4e34f8bf522af002a1daa6c190"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cf3bb4e34f8bf522af002a1daa6c190">&#9670;&nbsp;</a></span>uart_isRXBufOverflow1()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool uart_isRXBufOverflow1 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine if an overflow of the UART RX buffer has occurred during the RX complete ISR and clear the error flag. </p>
<p>When this happens, additional data read from the UART is discarded and a packet can not be fully received.</p>
<dl class="section return"><dt>Returns</dt><dd>true if overflow occurred, false otherwise </dd></dl>

</div>
</div>
<a id="aa76f44fb7b77c54424bbbb0f3e070ea0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa76f44fb7b77c54424bbbb0f3e070ea0">&#9670;&nbsp;</a></span>uart_isRXBufOverflow2()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool uart_isRXBufOverflow2 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine if an overflow of the UART RX buffer has occurred during the RX complete ISR and clear the error flag. </p>
<p>When this happens, additional data read from the UART is discarded and a packet can not be fully received.</p>
<dl class="section return"><dt>Returns</dt><dd>true if overflow occurred, false otherwise </dd></dl>

</div>
</div>
<a id="acf467075cc07d156cb5971b63c131264"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf467075cc07d156cb5971b63c131264">&#9670;&nbsp;</a></span>uart_isRXBufOverflow3()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool uart_isRXBufOverflow3 </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Determine if an overflow of the UART RX buffer has occurred during the RX complete ISR and clear the error flag. </p>
<p>When this happens, additional data read from the UART is discarded and a packet can not be fully received.</p>
<dl class="section return"><dt>Returns</dt><dd>true if overflow occurred, false otherwise </dd></dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.html">lib</a></li><li class="navelem"><a class="el" href="dir_5d0aa56803c8250a5d891761f6bfc5c7.html">io</a></li><li class="navelem"><a class="el" href="dir_ffe32ea58ceba9a965f60626da9b0d3b.html">uart</a></li><li class="navelem"><a class="el" href="uart_8h.html">uart.h</a></li>
    <li class="footer">Generated by <a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.8.20 </li>
  </ul>
</div>
</body>
</html>
