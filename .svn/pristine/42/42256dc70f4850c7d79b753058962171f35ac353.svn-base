<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.20"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>HWPRobot: timeTask.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">HWPRobot
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.20 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('time_task_8h_source.html',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">timeTask.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="time_task_8h.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * @file timeTask.h</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * @ingroup tools</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * Functions for timed execution of code and measurement of execution time.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * Timer 5 is used for measuring the uptime. Its output compare match ISR</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * &lt;code&gt;TIMER5_COMPA_vect&lt;/code&gt; is fired every millisecond.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * Note that the ISR &lt;code&gt;TIMER5_COMPA_vect&lt;/code&gt; also has the responsibility</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * of starting AD conversions if the ADC library has been initialized by</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * ADC_init(). See lib/io/adc/adc.h for further details.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * Several bits of the register GPIOR0 are used for different purposes. The</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * bits are defined in lib/tools/timeTask/GPIOR0Defs.h.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * - The bit defined by #GPIOR0_ADC_BIT determines if the ADC has been initialized</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> *   and is activated (modified by ADC_init(), ADC_pause() and ADC_resume()).</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> *   If this flag is set, ADC conversions are triggered by the ISR</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> *   &lt;code&gt;TIMER5_COMPA_vect&lt;/code&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * - The bit defined by #GPIOR0_INIT_BIT serves as a flag which determines</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> *   if timeTask_init() has already been called in order to prevent multiple</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> *   initializations.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> * - The bit defined by #GPIOR0_INDEX_BIT serves an array index (which can only</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> *   be 0 or 1) into an internally managed array timeTask_uptime[2]. This array,</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> *   keeping the current and the previous uptime, and the index bit are written</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"> *   asynchronously in interrupt context. This information is used by the</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment"> *   #TIMETASK macro when reading the current uptime in milliseconds. With this</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment"> *   double buffering, there is no need to disable interrupts in main context</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment"> *   when reading from the array, as access to the array index is atomic.</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment"> * The register GPIOR0 is cleared during startup by placing appropriate code</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"> * into the .init3 section.</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#ifndef TIMETASK_H_</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#define TIMETASK_H_</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_g_p_i_o_r0_defs_8h.html">GPIOR0Defs.h</a>&quot;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#include &lt;stdint.h&gt;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;avr/io.h&gt;</span>         <span class="comment">// AVR IO ports</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment"> * Execution of body block every &#39;cycles&#39; loop cycles.</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"> * Needs NO initialization via timeTask_init() and hence no timer.</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"> * &lt;b&gt;Usage:&lt;/b&gt;</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"> * @code</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"> * for(;;) { // main loop</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment"> *     CYCLETASK(T1, 1000) { // execute every 1000 loop cycles</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment"> *         // do some stuff</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"> *         static int16_t j = 0;</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"> *         j++;</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"> *         communication_log(LEVEL_INFO, &quot;T1: %d\n&quot;, j);</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment"> *      }</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"> *      CYCLETASK(T2, 333) { // execute every 333 loop cycles</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment"> *          // do some other stuff</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment"> *          static int16_t j = 0;</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment"> *          j++;</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment"> *          communication_log(LEVEL_INFO, &quot;T2: %d\n&quot;, j);</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"> *      }</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"> *  }</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment"> *  @endcode</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="time_task_8h.html#aef699878d6c6b78f8343ab3c6c5fa1a6">   69</a></span>&#160;<span class="preprocessor">#define CYCLETASK(name, cycles) static uint32_t name = 0; if (! (name = (name &gt; cycles) ? 0 : (name + 1)))</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment"> * Timestamp structure which holds a timstamp acquired by timeTask_getTimestamp().</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"> * The timestamp consists of a milliseconds field which stores the uptime in the range from 0 to 4294967295ms.</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"> * The microseconds field holds the microseconds in the range 0 to 999.</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment"> * Thus, the range of the timestamp is from 0 to 4294967295999 microseconds (about</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment"> * 1193 hours, before the timestamp overflows).</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"> * The duration between two timestamps can be determined with timeTask_getDuration().</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="structtime_task__time__t.html">   82</a></span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span>{</div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="structtime_task__time__t.html#a7bbe3f2c092021a33e78c663fdf724c9">   83</a></span>&#160;    uint32_t <a class="code" href="structtime_task__time__t.html#a7bbe3f2c092021a33e78c663fdf724c9">time_ms</a>; <span class="comment">///&lt; milliseconds in the range 0 to 4294967295</span></div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="structtime_task__time__t.html#ae94325d4ed9360b19e7669a4974184a6">   84</a></span>&#160;<span class="comment"></span>    uint16_t <a class="code" href="structtime_task__time__t.html#ae94325d4ed9360b19e7669a4974184a6">time_us</a>; <span class="comment">///&lt; microseconds in the range 0 to 999</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"></span>} <a class="code" href="structtime_task__time__t.html">timeTask_time_t</a>;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"> * Initialization for the #TIMETASK macro and for execution time measurement.</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"> * Uses timer 5 to fire output compare match interrupt every millisecond.</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"> * Global interrupts must be enabled manually after calling this function.</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"> * Note that timeTask_init() is also called by ADC_init() to ensure that AD</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"> * conversions are started by &lt;code&gt;TIMER5_COMPA_vect&lt;/code&gt;.</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keywordtype">void</span> <a class="code" href="time_task_8h.html#a822c1dd28154e13180cc743b24eb7411">timeTask_init</a>(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"> * Execution of body block with a minimum delay of &#39;interval_ms&#39; milliseconds in</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"> * between.</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment"> * Requires initialization via timeTask_init(). The function is robust concerning</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"> * overflow of uptime variable, since comparison with interval_ms is done as</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"> * unsigned using the full range of the variable.</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment"> * Note that the actual interval may be larger and varying due to execution time of</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"> * other code in main loop as well as frequency and duration of interrupt service</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment"> * routines.</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment"> * The maximum interval is 65535ms!</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"> * &lt;b&gt;Usage:&lt;/b&gt;</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"> * @code</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"> * for(;;) { // main loop</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"> *     TIMETASK(T1, 100) { // execute block approximately every 100ms</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"> *         // do some stuff</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"> *         static int16_t j = 0;</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"> *         j++;</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"> *         communication_log(LEVEL_INFO, &quot;T1: %d\n&quot;, j);</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment"> *      }</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"> *      TIMETASK(T2, 200) { // execute block approximately every 200ms</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment"> *          // do some other stuff</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"> *          static int16_t j = 0;</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"> *          j++;</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"> *          communication_log(LEVEL_INFO, &quot;T2: %d\n&quot;, j);</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"> *      }</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment"> *  }</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"> *  @endcode</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="time_task_8h.html#aa17ec8d44bd9cef3a238ce450a3ac29c">  131</a></span>&#160;<span class="preprocessor">#define TIMETASK(name, interval_ms)                                      \</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor">    static uint16_t name = 0;                                            \</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor">    register uint16_t tt_uptime_##name = timeTask_getUptime();           \</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor">    register uint8_t tt_ex_##name = 0;                                   \</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="preprocessor">    if ((tt_uptime_##name - name) &gt;= (uint16_t)interval_ms) {            \</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="preprocessor">        name = tt_uptime_##name;                                         \</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="preprocessor">        tt_ex_##name = 1;                                                \</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="preprocessor">    }                                                                    \</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="preprocessor">    if (tt_ex_##name)</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment"> * Get current uptime in milliseconds.</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"> * This function is internally used by the #TIMETASK macro when checking</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"> * if the time task needs to be executed.</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"> * @return  current uptime in milliseconds</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="time_task_8h.html#a1737a27bf166782ba7995a8c3be4137f">  149</a></span>&#160;<span class="keyword">static</span> <span class="keyword">inline</span> uint16_t __attribute__((always_inline)) <a class="code" href="time_task_8h.html#a1737a27bf166782ba7995a8c3be4137f">timeTask_getUptime</a>(<span class="keywordtype">void</span>) {</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">extern</span> uint16_t timeTask_uptime[2];</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    uint16_t uptime;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <span class="keyword">asm</span> <span class="keyword">volatile</span> (</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="stringliteral">&quot;sbic %[INDEX], %[INDEX_BIT]&quot;</span>    <span class="stringliteral">&quot;\n\t&quot;</span> <span class="comment">// skip if bit GPIOR0_INDEX_BIT in GPIOR0 is cleared</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="stringliteral">&quot;rjmp L_getUptimeIndex1%=&quot;</span>       <span class="stringliteral">&quot;\n\t&quot;</span> <span class="comment">// if bit is set, jump to L_getUptimeIndex1%=</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="stringliteral">&quot;lds %A[UPTIME], %[ADDR]&quot;</span>        <span class="stringliteral">&quot;\n\t&quot;</span> <span class="comment">// load low byte of timeTask_uptime[0]</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="stringliteral">&quot;lds %B[UPTIME], (%[ADDR])+1&quot;</span>    <span class="stringliteral">&quot;\n\t&quot;</span> <span class="comment">// load high byte of timeTask_uptime[0]</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="stringliteral">&quot;rjmp L_getUptimeEnd%=&quot;</span>          <span class="stringliteral">&quot;\n\t&quot;</span> <span class="comment">// jump to L_getUptimeEnd%=</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="stringliteral">&quot;L_getUptimeIndex1%=:&quot;</span>           <span class="stringliteral">&quot;\n\t&quot;</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="stringliteral">&quot;lds %A[UPTIME], (%[ADDR])+2&quot;</span>    <span class="stringliteral">&quot;\n\t&quot;</span> <span class="comment">// load low byte of timeTask_uptime[1]</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="stringliteral">&quot;lds %B[UPTIME], (%[ADDR])+3&quot;</span>    <span class="stringliteral">&quot;\n\t&quot;</span> <span class="comment">// load high byte of timeTask_uptime[1]</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="stringliteral">&quot;L_getUptimeEnd%=:&quot;</span>              <span class="stringliteral">&quot;\n\t&quot;</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        : [UPTIME] <span class="stringliteral">&quot;=r&quot;</span> (uptime)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        : [ADDR] <span class="stringliteral">&quot;i&quot;</span> (timeTask_uptime),</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;          [INDEX] <span class="stringliteral">&quot;n&quot;</span> (_SFR_IO_ADDR(GPIOR0)),</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;          [INDEX_BIT] <span class="stringliteral">&quot;n&quot;</span> (<a class="code" href="_g_p_i_o_r0_defs_8h.html#a68d2ba193bf37ba6b385d3a49163855e">GPIOR0_INDEX_BIT</a>)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        : <span class="comment">// no clobber</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    );</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">return</span> uptime;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"> * Get a timestamp for execution time measurement.</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"> * This functions captures the uptime with a resolution of 1 microsecond.</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"> * Use this function in conjunction with timeTask_getDuration() to get the</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"> * duration between two timestamps.</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment"> * @param   timestamp receives the current timestamp</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keywordtype">void</span> <a class="code" href="time_task_8h.html#a8d1bb394b8fd926a298686e31f057837">timeTask_getTimestamp</a>(<a class="code" href="structtime_task__time__t.html">timeTask_time_t</a>* timestamp);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment"> * Calculate the duration between timestamps stopTime and startTime.</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment"> * stopTime must represent a larger value than startTime. No overflow</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment"> * of the timestamps are taken into account (which happens after an</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"> * uptime of about 1193 hours).</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"> * Although the timestamps have a larger range (see timeTask_time_t),</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment"> * the maximum duration between two timestamps is limited by</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment"> * 4294967295us (about 1.19 hours).</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"> * @param   startTime first timestamp</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment"> * @param   stopTime second timestamp (larger than startTime)</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"> * @return  duration in microseconds (max. value is 4294967295us)</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;uint32_t <a class="code" href="time_task_8h.html#a30b2c9c69d7b5f602148b927769c3d03">timeTask_getDuration</a>(<span class="keyword">const</span> <a class="code" href="structtime_task__time__t.html">timeTask_time_t</a>* startTime, <span class="keyword">const</span> <a class="code" href="structtime_task__time__t.html">timeTask_time_t</a>* stopTime);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* TIMETASK_H_ */</span><span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="atime_task_8h_html_a30b2c9c69d7b5f602148b927769c3d03"><div class="ttname"><a href="time_task_8h.html#a30b2c9c69d7b5f602148b927769c3d03">timeTask_getDuration</a></div><div class="ttdeci">uint32_t timeTask_getDuration(const timeTask_time_t *startTime, const timeTask_time_t *stopTime)</div><div class="ttdoc">Calculate the duration between timestamps stopTime and startTime.</div><div class="ttdef"><b>Definition:</b> <a href="time_task_8c_source.html#l00082">timeTask.c:82</a></div></div>
<div class="ttc" id="a_g_p_i_o_r0_defs_8h_html"><div class="ttname"><a href="_g_p_i_o_r0_defs_8h.html">GPIOR0Defs.h</a></div><div class="ttdoc">Definitions for timeTask and ADC functions and interrupts concerning the use of the register GPIOR0.</div></div>
<div class="ttc" id="astructtime_task__time__t_html_ae94325d4ed9360b19e7669a4974184a6"><div class="ttname"><a href="structtime_task__time__t.html#ae94325d4ed9360b19e7669a4974184a6">timeTask_time_t::time_us</a></div><div class="ttdeci">uint16_t time_us</div><div class="ttdoc">microseconds in the range 0 to 999</div><div class="ttdef"><b>Definition:</b> <a href="time_task_8h_source.html#l00084">timeTask.h:84</a></div></div>
<div class="ttc" id="atime_task_8h_html_a8d1bb394b8fd926a298686e31f057837"><div class="ttname"><a href="time_task_8h.html#a8d1bb394b8fd926a298686e31f057837">timeTask_getTimestamp</a></div><div class="ttdeci">void timeTask_getTimestamp(timeTask_time_t *timestamp)</div><div class="ttdoc">Get a timestamp for execution time measurement.</div><div class="ttdef"><b>Definition:</b> <a href="time_task_8c_source.html#l00068">timeTask.c:68</a></div></div>
<div class="ttc" id="a_g_p_i_o_r0_defs_8h_html_a68d2ba193bf37ba6b385d3a49163855e"><div class="ttname"><a href="_g_p_i_o_r0_defs_8h.html#a68d2ba193bf37ba6b385d3a49163855e">GPIOR0_INDEX_BIT</a></div><div class="ttdeci">#define GPIOR0_INDEX_BIT</div><div class="ttdoc">Definition of bit in GPIOR0 used by TIMETASK macro and ISR TIMER5_COMPA_vect.</div><div class="ttdef"><b>Definition:</b> <a href="_g_p_i_o_r0_defs_8h_source.html#l00022">GPIOR0Defs.h:22</a></div></div>
<div class="ttc" id="atime_task_8h_html_a1737a27bf166782ba7995a8c3be4137f"><div class="ttname"><a href="time_task_8h.html#a1737a27bf166782ba7995a8c3be4137f">timeTask_getUptime</a></div><div class="ttdeci">static uint16_t timeTask_getUptime(void)</div><div class="ttdoc">Get current uptime in milliseconds.</div><div class="ttdef"><b>Definition:</b> <a href="time_task_8h_source.html#l00149">timeTask.h:149</a></div></div>
<div class="ttc" id="atime_task_8h_html_a822c1dd28154e13180cc743b24eb7411"><div class="ttname"><a href="time_task_8h.html#a822c1dd28154e13180cc743b24eb7411">timeTask_init</a></div><div class="ttdeci">void timeTask_init(void)</div><div class="ttdoc">Initialization for the TIMETASK macro and for execution time measurement.</div><div class="ttdef"><b>Definition:</b> <a href="time_task_8c_source.html#l00039">timeTask.c:39</a></div></div>
<div class="ttc" id="astructtime_task__time__t_html_a7bbe3f2c092021a33e78c663fdf724c9"><div class="ttname"><a href="structtime_task__time__t.html#a7bbe3f2c092021a33e78c663fdf724c9">timeTask_time_t::time_ms</a></div><div class="ttdeci">uint32_t time_ms</div><div class="ttdoc">milliseconds in the range 0 to 4294967295</div><div class="ttdef"><b>Definition:</b> <a href="time_task_8h_source.html#l00083">timeTask.h:83</a></div></div>
<div class="ttc" id="astructtime_task__time__t_html"><div class="ttname"><a href="structtime_task__time__t.html">timeTask_time_t</a></div><div class="ttdoc">Timestamp structure which holds a timstamp acquired by timeTask_getTimestamp().</div><div class="ttdef"><b>Definition:</b> <a href="time_task_8h_source.html#l00082">timeTask.h:82</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.html">lib</a></li><li class="navelem"><a class="el" href="dir_ae739fea4b40983dc0b532e496181ccd.html">tools</a></li><li class="navelem"><a class="el" href="dir_e08733222c8fd1d6299ed14b30be5fa2.html">timeTask</a></li><li class="navelem"><a class="el" href="time_task_8h.html">timeTask.h</a></li>
    <li class="footer">Generated by <a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.8.20 </li>
  </ul>
</div>
</body>
</html>
