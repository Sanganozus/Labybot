<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.20"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>HWPRobot: adc.c Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">HWPRobot
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.20 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('adc_8c_source.html',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">adc.c</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="adc_8h.html">adc.h</a>&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="communication_8h.html">communication/communication.h</a>&gt;</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="time_task_8h.html">tools/timeTask/timeTask.h</a>&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;avr/interrupt.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;util/atomic.h&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;string.h&gt;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">// data structure for ADC channel configurations and moving average filter for each channel</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">typedef</span> <span class="keyword">struct </span>__attribute__((__packed__)) {</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    <span class="keyword">volatile</span> uint8_t pos;                       <span class="comment">// index in history array with the latest sample</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    uint8_t admux;                              <span class="comment">// value for the ADMUX register for sampling this channel</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    uint8_t adcsrb;                             <span class="comment">// value for the ADCSRB register for sampling this channel</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    uint8_t channel;                            <span class="comment">// physical ADC channel in bits 0-3 with values: 0 =&gt; ADC0, 1 =&gt; ADC1, ..., 15 =&gt; ADC15; bit</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    <span class="keyword">volatile</span> uint32_t sum;                      <span class="comment">// sum of the latest ADC_FILTER_SIZE samples</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    <span class="keyword">volatile</span> uint16_t history[<a class="code" href="adc__cfg_8h.html#a84704f89dac62ee87776cbbd55698bed">ADC_FILTER_SIZE</a>]; <span class="comment">// storage for the latest ADC_FILTER_SIZE samples</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;} ADCChannel_t;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">// moving average filter for all channels</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;ADCChannel_t ADC_channels[<a class="code" href="adc__cfg_8h.html#a18b5b8600b67ba3c5efd48f11c9692d8">ADC_CHANNEL_COUNT</a>];</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">// pointer into channels array with currently sampled channel</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;ADCChannel_t* ADC_currentChannel;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="adc_8h.html#a2dcdab718d3e55b1d407969a4e31ce96">   29</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="adc_8h.html#a2dcdab718d3e55b1d407969a4e31ce96">ADC_init</a>(<span class="keyword">const</span> <span class="keywordtype">bool</span> disableJTAG) {</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">if</span> (disableJTAG) {</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="comment">// atomically disable the JTAG interface</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            <span class="comment">// read MCUCR and set bit for disabling JTAG</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            uint8_t mcucr = MCUCR | _BV(JTD);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;            <span class="comment">// New value for MCUCR must be written twice within four clock cycles</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            <span class="comment">// in order to have JTAG disabled</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            MCUCR = mcucr;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            MCUCR = mcucr;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        }</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    }</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">// disable power reduction of ADC</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    PRR0 &amp;= ~_BV(PRADC);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="comment">// disable ADC for now</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    ADCSRA = 0x00;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="comment">// switch off analog comparator</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    ACSR |= _BV(ACD);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">    #if (ADC_FILTER_SIZE &gt; 256)</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">        #error ADC_FILTER_SIZE exceeds limit of 256 bytes</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">    #if (ADC_FILTER_SIZE &amp; (ADC_FILTER_SIZE - 1))</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">        #error ADC_FILTER_SIZE is not a power of 2</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">// initialize data structure</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    memset((<span class="keywordtype">void</span>*)(ADC_channels), 0, <span class="keyword">sizeof</span>(ADC_channels));</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    ADC_currentChannel = &amp;ADC_channels[0];</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="comment">// set mapping between virtual and physical ADC channels in data structure</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <a class="code" href="adc__cfg_8h.html#a2cb52a426bba6101d2b03b7b2120fc54">ADC_CHANNEL_INIT</a></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="comment">// Configure ADC_channels[i].admux and ADC_channels[i].adcsrb for all channels.</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="comment">// Also disable digital input buffers for used ADC channels in order to save</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="comment">// some power, especially if analog voltage is close to Vcc/2</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    uint8_t</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        didr0 = 0,</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        didr2 = 0;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">for</span> (uint8_t i = 0; i &lt; <a class="code" href="adc__cfg_8h.html#a18b5b8600b67ba3c5efd48f11c9692d8">ADC_CHANNEL_COUNT</a>; ++i) {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="comment">// clear up-to-date flag and constrain channel numbers to range from 0 to 15</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        ADC_channels[i].channel &amp;= 0x0F;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keyword">register</span> uint8_t</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            physicalChannel = ADC_channels[i].channel,</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            physicalChannelAND0x07 = physicalChannel &amp; 0x07;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="comment">// voltage reference for ADC is AVCC pin (connected to 3.3V)</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        ADC_channels[i].admux = _BV(REFS0) | physicalChannelAND0x07;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">if</span> (physicalChannel &amp; _BV(3)) {</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            didr2 |= _BV(physicalChannelAND0x07);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="comment">// if channel &gt; 7, MUX5 (ADCSRB bit 3) has to be set, otherwise cleared</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            ADC_channels[i].adcsrb = _BV(MUX5);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        } <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            didr0 |= _BV(physicalChannelAND0x07);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="comment">// note: ADC_channels[i].adcsrb = 0 per initialization</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    DIDR0 = didr0;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    DIDR2 = didr2;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="comment">// configure ADC to sample the first channel</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    ADMUX = ADC_channels[0].admux;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    ADCSRB = ADC_channels[0].adcsrb;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="comment">// ADC is now fully setup and the next run of TIMER5_COMPA_vect can start</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="comment">// the conversion. Bit GPIOR0_ADC_BIT of GPIOR0 is set to 1</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    GPIOR0 |= _BV(<a class="code" href="_g_p_i_o_r0_defs_8h.html#a9b78db1bc4ce49dc723097bcabb04227">GPIOR0_ADC_BIT</a>);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="comment">// initialize timeTask since starting of ADC conversion is triggered</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="comment">// by compare match interrupt of timer 5</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="time_task_8h.html#a822c1dd28154e13180cc743b24eb7411">timeTask_init</a>();</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="adc_8h.html#a82a5c6a8174e7f40c61017879e522c45">  109</a></span>&#160;uint16_t <a class="code" href="adc_8h.html#a82a5c6a8174e7f40c61017879e522c45">ADC_getFilteredValue</a>(<span class="keyword">const</span> uint8_t channel) {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="comment">// perform atomic read on ADC_channels[channel].sum</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    ADCChannel_t *c = &amp;ADC_channels[channel];</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="comment">// Tell the compiler that we want to use variable c now, although we don&#39;t</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="comment">// do this. This memory barrier allows the placement of the code for</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="comment">// accessing ADC_channels[channel] before interrupts are disabled in the atomic</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="comment">// block. Otherwise the compiler would place this code after cli. This</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="comment">// ensures that interrupts are disabled for the smallest possible time.</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keyword">asm</span> <span class="keyword">volatile</span> (<span class="stringliteral">&quot;&quot;</span> : : <span class="stringliteral">&quot;r&quot;</span> (c) : <span class="stringliteral">&quot;memory&quot;</span>);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    uint32_t sum;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        sum = c-&gt;sum;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    }</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="comment">// calculate average</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keywordflow">return</span> (uint16_t)(sum / <a class="code" href="adc__cfg_8h.html#a84704f89dac62ee87776cbbd55698bed">ADC_FILTER_SIZE</a>);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="adc_8h.html#a690d803e2a3b4a34ec5097e19e0e06a8">  131</a></span>&#160;uint16_t <a class="code" href="adc_8h.html#a690d803e2a3b4a34ec5097e19e0e06a8">ADC_getLastValue</a>(<span class="keyword">const</span> uint8_t channel) {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment">// read ADC_channels[channel].history[pos]</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="comment">// Note that access to the array index pos is atomic which alleviates the need</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// for disabling interrupts when reading from the history array.</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    ADCChannel_t *c = &amp;ADC_channels[channel];</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">return</span> c-&gt;history[c-&gt;pos];</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;}</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="adc_8h.html#a61e0110591111bfa9cd888b17f1b4fb4">  142</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="adc_8h.html#a61e0110591111bfa9cd888b17f1b4fb4">ADC_isUpToDate</a>(<span class="keyword">const</span> uint8_t channel) {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">return</span> (ADC_channels[channel].channel &amp; _BV(7)) != 0;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="adc_8h.html#afe1150ad819cb634ec7e0b4fc3c87d2c">  147</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="adc_8h.html#afe1150ad819cb634ec7e0b4fc3c87d2c">ADC_setUpToDate</a>(<span class="keyword">const</span> uint8_t channel) {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    ADC_channels[channel].channel |= _BV(7);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aadc__cfg_8h_html_a84704f89dac62ee87776cbbd55698bed"><div class="ttname"><a href="adc__cfg_8h.html#a84704f89dac62ee87776cbbd55698bed">ADC_FILTER_SIZE</a></div><div class="ttdeci">#define ADC_FILTER_SIZE</div><div class="ttdoc">Size of the moving average filter for each ADC channel.</div><div class="ttdef"><b>Definition:</b> <a href="adc__cfg_8h_source.html#l00044">adc_cfg.h:44</a></div></div>
<div class="ttc" id="aadc_8h_html_afe1150ad819cb634ec7e0b4fc3c87d2c"><div class="ttname"><a href="adc_8h.html#afe1150ad819cb634ec7e0b4fc3c87d2c">ADC_setUpToDate</a></div><div class="ttdeci">void ADC_setUpToDate(const uint8_t channel)</div><div class="ttdoc">Set the up-to-date flag for a channel to true.</div><div class="ttdef"><b>Definition:</b> <a href="adc_8c_source.html#l00147">adc.c:147</a></div></div>
<div class="ttc" id="aadc_8h_html"><div class="ttname"><a href="adc_8h.html">adc.h</a></div><div class="ttdoc">Library for interfacing with AD converter.</div></div>
<div class="ttc" id="aadc_8h_html_a61e0110591111bfa9cd888b17f1b4fb4"><div class="ttname"><a href="adc_8h.html#a61e0110591111bfa9cd888b17f1b4fb4">ADC_isUpToDate</a></div><div class="ttdeci">bool ADC_isUpToDate(const uint8_t channel)</div><div class="ttdoc">Get the up-to-date flag for a channel.</div><div class="ttdef"><b>Definition:</b> <a href="adc_8c_source.html#l00142">adc.c:142</a></div></div>
<div class="ttc" id="aadc__cfg_8h_html_a18b5b8600b67ba3c5efd48f11c9692d8"><div class="ttname"><a href="adc__cfg_8h.html#a18b5b8600b67ba3c5efd48f11c9692d8">ADC_CHANNEL_COUNT</a></div><div class="ttdeci">#define ADC_CHANNEL_COUNT</div><div class="ttdoc">Number of ADC channels to be sampled.</div><div class="ttdef"><b>Definition:</b> <a href="adc__cfg_8h_source.html#l00016">adc_cfg.h:16</a></div></div>
<div class="ttc" id="aadc__cfg_8h_html_a2cb52a426bba6101d2b03b7b2120fc54"><div class="ttname"><a href="adc__cfg_8h.html#a2cb52a426bba6101d2b03b7b2120fc54">ADC_CHANNEL_INIT</a></div><div class="ttdeci">#define ADC_CHANNEL_INIT</div><div class="ttdoc">Maps the ADC_CHANNEL_COUNT virtual channel numbers to the ADMUX register values of the physical chann...</div><div class="ttdef"><b>Definition:</b> <a href="adc__cfg_8h_source.html#l00032">adc_cfg.h:32</a></div></div>
<div class="ttc" id="aadc_8h_html_a2dcdab718d3e55b1d407969a4e31ce96"><div class="ttname"><a href="adc_8h.html#a2dcdab718d3e55b1d407969a4e31ce96">ADC_init</a></div><div class="ttdeci">void ADC_init(const bool disableJTAG)</div><div class="ttdoc">Initialize the AD converter library.</div><div class="ttdef"><b>Definition:</b> <a href="adc_8c_source.html#l00029">adc.c:29</a></div></div>
<div class="ttc" id="atime_task_8h_html_a822c1dd28154e13180cc743b24eb7411"><div class="ttname"><a href="time_task_8h.html#a822c1dd28154e13180cc743b24eb7411">timeTask_init</a></div><div class="ttdeci">void timeTask_init(void)</div><div class="ttdoc">Initialization for the TIMETASK macro and for execution time measurement.</div><div class="ttdef"><b>Definition:</b> <a href="time_task_8c_source.html#l00039">timeTask.c:39</a></div></div>
<div class="ttc" id="acommunication_8h_html"><div class="ttname"><a href="communication_8h.html">communication.h</a></div><div class="ttdoc">Functions enabling communication between robot and HWPCS.</div></div>
<div class="ttc" id="aadc_8h_html_a690d803e2a3b4a34ec5097e19e0e06a8"><div class="ttname"><a href="adc_8h.html#a690d803e2a3b4a34ec5097e19e0e06a8">ADC_getLastValue</a></div><div class="ttdeci">uint16_t ADC_getLastValue(const uint8_t channel)</div><div class="ttdoc">Read the latest raw value (unfiltered) from the AD converter for a given channel.</div><div class="ttdef"><b>Definition:</b> <a href="adc_8c_source.html#l00131">adc.c:131</a></div></div>
<div class="ttc" id="a_g_p_i_o_r0_defs_8h_html_a9b78db1bc4ce49dc723097bcabb04227"><div class="ttname"><a href="_g_p_i_o_r0_defs_8h.html#a9b78db1bc4ce49dc723097bcabb04227">GPIOR0_ADC_BIT</a></div><div class="ttdeci">#define GPIOR0_ADC_BIT</div><div class="ttdoc">Definition of bit in GPIOR0 used by ADC functions and the ISR TIMER5_COMPA_vect.</div><div class="ttdef"><b>Definition:</b> <a href="_g_p_i_o_r0_defs_8h_source.html#l00042">GPIOR0Defs.h:42</a></div></div>
<div class="ttc" id="aadc_8h_html_a82a5c6a8174e7f40c61017879e522c45"><div class="ttname"><a href="adc_8h.html#a82a5c6a8174e7f40c61017879e522c45">ADC_getFilteredValue</a></div><div class="ttdeci">uint16_t ADC_getFilteredValue(const uint8_t channel)</div><div class="ttdoc">Read the filtered value from the AD converter for a given channel.</div><div class="ttdef"><b>Definition:</b> <a href="adc_8c_source.html#l00109">adc.c:109</a></div></div>
<div class="ttc" id="atime_task_8h_html"><div class="ttname"><a href="time_task_8h.html">timeTask.h</a></div><div class="ttdoc">Functions for timed execution of code and measurement of execution time.</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.html">lib</a></li><li class="navelem"><a class="el" href="dir_5d0aa56803c8250a5d891761f6bfc5c7.html">io</a></li><li class="navelem"><a class="el" href="dir_4c3a6decbf3115980a86ec6f516d0419.html">adc</a></li><li class="navelem"><b>adc.c</b></li>
    <li class="footer">Generated by <a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.8.20 </li>
  </ul>
</div>
</body>
</html>
